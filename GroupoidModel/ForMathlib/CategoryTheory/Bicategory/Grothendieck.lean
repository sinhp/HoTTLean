/-
Copyright (c) 2024 Calle Sönne. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Calle Sönne, Joseph Hua
-/

import Mathlib.CategoryTheory.Bicategory.LocallyDiscrete
import Mathlib.CategoryTheory.Bicategory.NaturalTransformation.Pseudo
import SEq.Tactic.DepRewrite
import Mathlib.CategoryTheory.Bicategory.Functor.LocallyDiscrete
import Mathlib.CategoryTheory.Category.Cat.AsSmall
import Mathlib.CategoryTheory.Elements
import Mathlib.CategoryTheory.Comma.Over.Basic


/-!
# The Grothendieck construction

Given a category `𝒮` and any pseudofunctor `F` from `𝒮` to `Cat`, we associate to it a category
`∫ F`, equipped with a functor `∫ F ⥤ 𝒮`.

The category `∫ F` is defined as follows:
* Objects: pairs `(S, a)` where `S` is an object of the base category and `a` is an object of the
  category `F(S)`.
* Morphisms: morphisms `(R, b) ⟶ (S, a)` are defined as pairs `(f, h)` where `f : R ⟶ S` is a
  morphism in `𝒮` and `h : b ⟶ F(f)(a)`

The projection functor `∫ F ⥤ 𝒮` is then given by projecting to the first factors, i.e.
* On objects, it sends `(S, a)` to `S`
* On morphisms, it sends `(f, h)` to `f`

## Future work / TODO

1. Once the bicategory of pseudofunctors has been defined, show that this construction forms a
pseudofunctor from `Pseudofunctor (LocallyDiscrete 𝒮) Cat` to `Cat`.
2. One could probably deduce the results in `CategoryTheory.Grothendieck` as a specialization of the
results in this file.

## References
[Vistoli2008] "Notes on Grothendieck Topologies, Fibered Categories and Descent Theory" by
Angelo Vistoli

-/

namespace CategoryTheory.Pseudofunctor

universe w v₁ v₂ v₃ u₁ u₂ u₃

open Functor Category Opposite Discrete Bicategory StrongTrans

section

variable {B : Type u₁} [Bicategory B]
variable (F : Pseudofunctor B Cat) {a b : B}


@[simp] lemma _root_.CategoryTheory.LocallyDiscrete.Iso.hom_inv {C : Type u₁} [Category C]
    (X Y : LocallyDiscrete C) (e : X ≅ Y) : e.hom.toLoc ≫ e.inv.toLoc = 𝟙 _ :=
  LocallyDiscrete.eq_of_hom ⟨⟨by simp⟩⟩

-- Autogenerated by adding @[to_app (attr := reassoc)] to `mapComp_assoc_right_hom`
lemma mapComp_assoc_right_hom_app_assoc {c d : B} (f : a ⟶ b) (g : b ⟶ c) (h : c ⟶ d)
    (X : ↑(F.obj a)) {Z : ↑(F.obj d)} (η : (F.map f ≫ F.map g ≫ F.map h).obj X ⟶ Z) :
    (F.mapComp f (g ≫ h)).hom.app X ≫ (F.mapComp g h).hom.app ((F.map f).obj X) ≫ η =
    (F.map₂ (α_ f g h).inv).app X ≫ (F.mapComp (f ≫ g) h).hom.app X ≫
    (F.map h).map ((F.mapComp f g).hom.app X) ≫ (α_ (F.map f) (F.map g) (F.map h)).hom.app X ≫ η :=
  sorry

-- Autogenerated by adding @[to_app (attr := reassoc)] to `StrongTrans.naturality_comp_inv`
def StrongTrans.naturality_comp_inv_app
    {F G : Pseudofunctor B Cat} (α : F ⟶ G) {a b c : B} (f : a ⟶ b) (g : b ⟶ c) (X : ↑(F.obj a)) :
    (α.naturality (f ≫ g)).inv.app X =
    (G.mapComp f g).hom.app ((α.app a).obj X) ≫
    (α_ (α.app a) (G.map f) (G.map g)).inv.app X ≫
    (G.map g).map ((α.naturality f).inv.app X) ≫
    (α_ (F.map f) (α.app b) (G.map g)).hom.app X ≫
    (α.naturality g).inv.app ((F.map f).obj X) ≫
    (α_ (F.map f) (F.map g) (α.app c)).inv.app X ≫ (α.app c).map ((F.mapComp f g).inv.app X) :=
  sorry


-- Autogenerated by adding @[to_app (attr := reassoc)] to `StrongTrans.naturality_comp_inv`
def StrongTrans.naturality_comp_inv_app_assoc
    {B : Type*} [Bicategory B]
    {F G : Pseudofunctor B Cat} (α : F ⟶ G) {a b c : B} (f : a ⟶ b) (g : b ⟶ c)
    (X : ↑(F.obj a)) {Z : ↑(G.obj c)} (h : (F.map (f ≫ g) ≫ α.app c).obj X ⟶ Z) :
    (α.naturality (f ≫ g)).inv.app X ≫ h =
    (G.mapComp f g).hom.app ((α.app a).obj X) ≫
    (α_ (α.app a) (G.map f) (G.map g)).inv.app X ≫
    (G.map g).map ((α.naturality f).inv.app X) ≫
    (α_ (F.map f) (α.app b) (G.map g)).hom.app X ≫
    (α.naturality g).inv.app ((F.map f).obj X) ≫
    (α_ (F.map f) (F.map g) (α.app c)).inv.app X ≫ (α.app c).map ((F.mapComp f g).inv.app X) ≫ h :=
  sorry
end

lemma _root_.CategoryTheory.Functor.toPseudofunctor'_map₂ {C : Type u₁} [Category.{v₁} C] (F : C ⥤ Cat)
    {a b : LocallyDiscrete C} {f g : a ⟶ b} (η : f ⟶ g) :
    F.toPseudoFunctor'.map₂ η = eqToHom (by simp [eq_of_hom η]) := by
  simp [toPseudoFunctor', pseudofunctorOfIsLocallyDiscrete]

@[simps]
def _root_.CategoryTheory.NatTrans.toStrongTrans' {C : Type u₁} [Category.{v₁} C] (F G : C ⥤ Cat) (α : F ⟶ G) :
    F.toPseudoFunctor' ⟶ G.toPseudoFunctor' where
  app x := α.app x.as
  naturality _ := eqToIso (α.naturality _)
  naturality_naturality η := by simp [Functor.toPseudofunctor'_map₂]
  naturality_id _ := by ext; simp [Bicategory.leftUnitor, Bicategory.rightUnitor]
  naturality_comp _ _ := by ext; simp [Bicategory.associator]

/-- An `eqToHom` in the category `Cat` is a functor that acts on maps by casts. -/
theorem _root_.CategoryTheory.Cat.map_eqToHom {C1 C2 : Cat} {x y : C1} (f : x ⟶ y) (eq : C1 = C2) :
    (eqToHom eq).map f = (cast (by subst eq; rfl) f) := by
  cases eq
  simp [CategoryStruct.id]

variable {𝒮 : Type u₁} [Category.{v₁} 𝒮] {F : Pseudofunctor (LocallyDiscrete 𝒮) Cat.{v₂, u₂}}

/-- The type of objects in the fibered category associated to a presheaf valued in types. -/
@[ext]
structure Grothendieck (F : Pseudofunctor (LocallyDiscrete 𝒮) Cat.{v₂, u₂}) where
  /-- The underlying object in the base category. -/
  base : 𝒮
  /-- The object in the fiber of the base object. -/
  fiber : F.obj ⟨base⟩

namespace Grothendieck

/-- Notation for the Grothendieck category associated to a pseudofunctor `F`. -/
scoped prefix:75 "∫ " => Grothendieck

/-- A morphism in the Grothendieck construction `∫ F` between two points `X Y : ∫ F` consists of
a morphism in the base category `base : X.base ⟶ Y.base` and
a morphism in a fiber `f.fiber : (F.map base).obj X.fiber ⟶ Y.fiber`.
-/
structure Hom (X Y : ∫ F) where
  /-- The morphism between base objects. -/
  base : X.base ⟶ Y.base
  /-- The morphism in the fiber over the domain. -/
  fiber : (F.map base.toLoc).obj X.fiber ⟶ Y.fiber

@[simps! id_base id_fiber comp_base comp_fiber]
instance categoryStruct : CategoryStruct (∫ F) where
  Hom X Y := Hom X Y
  id X := {
    base := 𝟙 X.base
    fiber := (F.mapId ⟨X.base⟩).hom.app X.fiber }
  comp {X _ _} f g := {
    base := f.base ≫ g.base
    fiber := (F.mapComp f.base.toLoc g.base.toLoc).hom.app X.fiber ≫
      (F.map g.base.toLoc).map f.fiber ≫ g.fiber }

instance (X : ∫ F) : Inhabited (Hom X X) :=
  ⟨𝟙 X⟩

section

variable {a b : ∫ F}

@[ext (iff := false)]
lemma Hom.ext (f g : a ⟶ b) (hfg₁ : f.base = g.base)
    (hfg₂ : eqToHom (hfg₁ ▸ rfl) ≫ f.fiber = g.fiber) : f = g := by
  cases f; cases g
  dsimp at hfg₁ hfg₂
  rw! [← hfg₂, ← hfg₁]
  simp

lemma Hom.ext_iff (f g : a ⟶ b) :
    f = g ↔ ∃ (hfg : f.base = g.base), eqToHom (hfg ▸ rfl) ≫ f.fiber = g.fiber where
  mp hfg := by subst hfg; simp
  mpr := fun ⟨hfg₁, hfg₂⟩ => Hom.ext f g hfg₁ hfg₂

lemma Hom.congr {a b : ∫ F} {f g : a ⟶ b} (h : f = g) :
    f.fiber = eqToHom (h ▸ rfl) ≫ g.fiber := by
  subst h
  simp

end

/-- The category structure on `∫ F`. -/
instance category : Category (∫ F) where
  toCategoryStruct := Pseudofunctor.Grothendieck.categoryStruct
  id_comp {a b} f := by
    ext
    · simp
    · simp [F.mapComp_id_left_hom_app, Strict.leftUnitor_eqToIso, ← Functor.map_comp_assoc]
  comp_id {a b} f := by
    ext
    · simp
    · simp [F.mapComp_id_right_hom_app, Strict.rightUnitor_eqToIso]
  assoc f g h := by
    ext
    · simp
    · simp [mapComp_assoc_right_hom_app_assoc, Strict.associator_eqToIso]
      -- rw [F.mapComp_assoc_right_hom_app_assoc] after Mathlib change

variable (F)

/-- The projection `∫ F ⥤ 𝒮` given by projecting both objects and homs to the first
factor. -/
@[simps]
def forget (F : Pseudofunctor (LocallyDiscrete 𝒮) Cat.{v₂, u₂}) : ∫ F ⥤ 𝒮 where
  obj X := X.base
  map f := f.base

section

attribute [local simp]
  Strict.leftUnitor_eqToIso Strict.rightUnitor_eqToIso Strict.associator_eqToIso

variable {F} {G : Pseudofunctor (LocallyDiscrete 𝒮) Cat.{v₂, u₂}}
  {H : Pseudofunctor (LocallyDiscrete 𝒮) Cat.{v₂, u₂}}

/-- The Grothendieck construction is functorial: a strong natural transformation `α : F ⟶ G`
induces a functor `Grothendieck.map : ∫ F ⥤ ∫ G`.
-/
@[simps!]
def map (α : F ⟶ G) : ∫ F ⥤ ∫ G where
  obj a := {
    base := a.base
    fiber := (α.app ⟨a.base⟩).obj a.fiber }
  map {a b} f := {
    base := f.1
    fiber := (α.naturality f.1.toLoc).inv.app a.fiber ≫ (α.app ⟨b.base⟩).map f.2 }
  map_id a := by
    ext
    · dsimp
    · simp [StrongTrans.naturality_id_inv_app, ← Functor.map_comp]
  map_comp {a b c} f g := by
    ext
    · dsimp
    · simp only [categoryStruct_comp_base, Quiver.Hom.comp_toLoc,
        StrongTrans.naturality_comp_inv_app_assoc, ← map_comp]
      have := (α.naturality g.base.toLoc).inv.naturality_assoc
      simp only [Cat.comp_map] at this
      simp [this]

@[simp]
lemma map_id_map {x y : ∫ F} (f : x ⟶ y) : (map (𝟙 F)).map f = f := by
  ext <;> simp

@[simp]
theorem map_comp_forget (α : F ⟶ G) : map α ⋙ forget G = forget F := rfl

section

variable (F)

/-- The natural isomorphism witnessing the pseudo-unity constraint of `Grothendieck.map`. -/
def mapIdIso : map (𝟙 F) ≅ 𝟭 (∫ F) :=
  NatIso.ofComponents (fun _ ↦ eqToIso (by aesop_cat))

lemma map_id_eq : map (𝟙 F) = 𝟭 (∫ F) :=
  Functor.ext_of_iso (mapIdIso F) (fun x ↦ by simp [map]) (fun x ↦ by simp [mapIdIso])

end

/-- The natural isomorphism witnessing the pseudo-functoriality of `Grothendieck.map`. -/
def mapCompIso (α : F ⟶ G) (β : G ⟶ H) : map (α ≫ β) ≅ map α ⋙ map β :=
  NatIso.ofComponents (fun _ ↦ eqToIso (by aesop_cat)) (fun f ↦ by
    dsimp
    simp only [comp_id, id_comp]
    ext <;> simp)

lemma map_comp_eq (α : F ⟶ G) (β : G ⟶ H) : map (α ≫ β) = map α ⋙ map β :=
  Functor.ext_of_iso (mapCompIso α β) (fun _ ↦ by simp [map]) (fun _ ↦ by simp [mapCompIso])

end

section Transport

variable {F} (x : ∫ F) {c : 𝒮}
/--
If `F : Pseudofunctor (LocallyDiscrete 𝒮) Cat` is a pseudofunctor and `t : c ⟶ d` is a morphism in
`C`, then `transport` maps each `c`-based element of `∫ F` to a `d`-based element.
-/
@[simps]
def transport (t : x.base ⟶ c) : ∫ F :=
  ⟨c, (F.map t.toLoc).obj x.fiber⟩

/--
If `F : Pseudofunctor (LocallyDiscrete 𝒮) Cat` is a pseudofunctor and `t : c ⟶ d` is a morphism in
`toTransport` is the morphism `x ⟶ x.transport t` induced by `t` and the identity on fibers.
-/
@[simps]
def toTransport (t : x.base ⟶ c) : x ⟶ x.transport t := ⟨t, (𝟙 _)⟩

end Transport

-- /--
-- Construct an isomorphism in a Grothendieck construction from isomorphisms in its base and fiber.
-- -/
-- @[simps]
-- def isoMk {X Y : ∫ F} (e₁ : X.base ≅ Y.base)
--     (e₂ : (F.map e₁.hom.toLoc).obj X.fiber ≅ Y.fiber) :
--     X ≅ Y where
--   hom := ⟨e₁.hom, e₂.hom⟩
--   inv :=
--     ⟨e₁.inv, (F.map e₁.inv.toLoc).map e₂.inv ≫
--     (F.mapComp e₁.hom.toLoc e₁.inv.toLoc).inv.app X.fiber ≫
--     (F.map₂ (eqToHom (LocallyDiscrete.eq_of_hom ⟨⟨by simp⟩⟩))).app X.fiber ≫
--     (F.mapId ⟨X.base⟩).hom.app X.fiber ⟩
--   hom_inv_id := by ext; all_goals simp
--   inv_hom_id := by
--     ext
--     · simp
--     · simp [eqToHom_map]
--       have h := (F.mapId ⟨Y.base⟩).hom.naturality e₂.hom
--       simp only [Cat.id_map] at h
--       simp only [← Functor.comp_map, ← Cat.comp_eq_comp]
--       rw [← (F.mapComp e₁.inv.toLoc e₁.hom.toLoc).hom.naturality_assoc]
--       -- unfold mapId at h
--       -- rw [← h]
--       -- ← (F.map e₁.hom.toLoc).map_comp_assoc,
--       sorry

end Pseudofunctor.Grothendieck

end CategoryTheory

/-!
# The Grothendieck construction

Given a functor `F : C ⥤ Cat`, the objects of `Grothendieck F`
consist of dependent pairs `(b, f)`, where `b : C` and `f : F.obj c`,
and a morphism `(b, f) ⟶ (b', f')` is a pair `β : b ⟶ b'` in `C`, and
`φ : (F.map β).obj f ⟶ f'`

`Grothendieck.functor` makes the Grothendieck construction into a functor from the functor category
`C ⥤ Cat` to the over category `Over C` in the category of categories.

Categories such as `PresheafedSpace` are in fact examples of this construction,
and it may be interesting to try to generalize some of the development there.

## Implementation notes

In `CategoryTheory.Bicategory.Grothendieck`,
`Cat` is treated as a strict 2-category and `F` is replaced with a pseudofunctor.
This file specializes this construction to 1-category theory.
The design of this file hides the 2-categorical definitions
so that the user only deals with the underlying 1-categories.

There is also a closely related construction starting with `G : Cᵒᵖ ⥤ Cat`,
where morphisms consists again of `β : b ⟶ b'` and `φ : f ⟶ (F.map (op β)).obj f'`.

## Notable constructions

- `Grothendieck F` is the Grothendieck construction.
- Elements of `Grothendieck F` whose base is `c : C` can be transported along `f : c ⟶ d` using
`transport`.
- A natural transformation `α : F ⟶ G` induces `map α : Grothendieck F ⥤ Grothendieck G`.
- The Grothendieck construction and `map` together form a functor (`functor`) from the functor
category `E ⥤ Cat` to the over category `Over E`.
- A functor `G : D ⥤ C` induces `pre F G : Grothendieck (G ⋙ F) ⥤ Grothendieck F`.

## References

See also `CategoryTheory.Functor.Elements` for the category of elements of functor `F : C ⥤ Type`.

* https://stacks.math.columbia.edu/tag/02XV
* https://ncatlab.org/nlab/show/Grothendieck+construction

-/


universe w u v u₁ v₁ u₂ v₂

namespace CategoryTheory

namespace Functor

variable {C : Type u} [Category.{v} C]
variable {D : Type u₁} [Category.{v₁} D]
variable (F : C ⥤ Cat.{v₂, u₂})

/--
The Grothendieck construction (often written as `∫ F` in mathematics) for a functor `F : C ⥤ Cat`
gives a category whose
* objects `X` consist of `X.base : C` and `X.fiber : F.obj base`
* morphisms `f : X ⟶ Y` consist of
  `base : X.base ⟶ Y.base` and
  `f.fiber : (F.map base).obj X.fiber ⟶ Y.fiber`
This is implemented as the Grothendieck construction on `F` viewed as a pseudofunctor.
-/
def Grothendieck := F.toPseudoFunctor'.Grothendieck

/-- Notation for the Grothendieck category associated to a functor `F`. -/
scoped prefix:75 "∫ " => Grothendieck

namespace Grothendieck

attribute [local simp] eqToHom_map

variable {F}

def base (p : ∫ F) : C := Pseudofunctor.Grothendieck.base p

def fiber (p : ∫ F) : F.obj p.base := Pseudofunctor.Grothendieck.fiber p

def mk (b : C) (f : F.obj b) : ∫ F where
  base := b
  fiber := f

-- NOTE: do not use `simps` attribute to generate these
-- since we want to use `Functor.Grothendieck.base` rather than `Pseudofunctor.Grothendieck.base`
@[simp] lemma mk_base {b : C} {f : F.obj b} : (mk b f).base = b :=
  rfl

@[simp] lemma mk_fiber {b : C} {f : F.obj b} : (mk b f).fiber = f :=
  rfl

/-- A morphism in the Grothendieck category `F : C ⥤ Cat` consists of
`base : X.base ⟶ Y.base` and `f.fiber : (F.map base).obj X.fiber ⟶ Y.fiber`.
-/
def Hom (X Y : ∫ F) := Pseudofunctor.Grothendieck.Hom X Y

namespace Hom

variable {X Y : ∫ F} (f g : Hom X Y)

/-- The morphism between base objects. -/
def base : X.base ⟶ Y.base := Pseudofunctor.Grothendieck.Hom.base f

/-- The morphism from the pushforward to the source fiber object to the target fiber object. -/
def fiber : (F.map f.base).obj X.fiber ⟶ Y.fiber := Pseudofunctor.Grothendieck.Hom.fiber f

def mk (b : X.base ⟶ Y.base) (f : (F.map b).obj X.fiber ⟶ Y.fiber) : Hom X Y where
  base := b
  fiber := f

@[simp]
lemma mk_base (b : X.base ⟶ Y.base) (f : (F.map b).obj X.fiber ⟶ Y.fiber) : (mk b f).base = b :=
  rfl

@[simp]
lemma mk_fiber (b : X.base ⟶ Y.base) (f : (F.map b).obj X.fiber ⟶ Y.fiber) : (mk b f).fiber = f :=
  rfl

@[ext (iff := false)]
theorem ext (w_base : f.base = g.base)
    (w_fiber : eqToHom (by rw [w_base]) ≫ f.fiber = g.fiber) : f = g :=
  Pseudofunctor.Grothendieck.Hom.ext _ _ w_base w_fiber

lemma ext_iff : f = g ↔ ∃ (hfg : f.base = g.base), eqToHom (hfg ▸ rfl) ≫ f.fiber = g.fiber :=
  Pseudofunctor.Grothendieck.Hom.ext_iff f g

lemma congr {f g : Hom X Y} (h : f = g) : f.fiber = eqToHom (h ▸ rfl) ≫ g.fiber :=
  Pseudofunctor.Grothendieck.Hom.congr h

instance (X : ∫ F) : Inhabited (Hom X X) :=
  inferInstanceAs (Inhabited (Pseudofunctor.Grothendieck.Hom _ _))

def id (X : ∫ F) : Hom X X := Pseudofunctor.Grothendieck.categoryStruct.id X

def comp {X Y Z : ∫ F} (f : Hom X Y) (g : Hom Y Z) : Hom X Z :=
  Pseudofunctor.Grothendieck.categoryStruct.comp f g

end Hom

instance : Category (∫ F) := {
  (inferInstanceAs $ Category (F.toPseudoFunctor'.Grothendieck)) with
  Hom := Hom
  id := Hom.id
  comp := Hom.comp
  }

namespace Hom

@[simp]
lemma id_base (X : ∫ F) :
    Hom.base (𝟙 X) = 𝟙 X.base :=
  rfl

@[simp]
lemma id_fiber (X : ∫ F) :
    Hom.fiber (𝟙 X) = eqToHom (by simp) := by
  simp [Hom.fiber, CategoryStruct.id, Hom.id]

@[simp]
lemma comp_base {X Y Z : ∫ F} (f : X ⟶ Y) (g : Y ⟶ Z) :
    (f ≫ g).base = f.base ≫ g.base :=
  rfl

@[simp]
lemma comp_fiber {X Y Z : ∫ F} (f : X ⟶ Y) (g : Y ⟶ Z) :
    Hom.fiber (f ≫ g) = eqToHom (by simp) ≫ (F.map g.base).map f.fiber ≫ g.fiber := by
  simp [Hom.fiber, CategoryStruct.comp, Hom.comp, Hom.base]

end Hom

@[simp]
lemma base_eqToHom {X Y : ∫ F} (h : X = Y) :
    (eqToHom h).base = eqToHom (by simp [h]) := by
  subst h; rfl

@[simp]
lemma fiber_eqToHom {X Y : ∫ F} (h : X = Y) :
    (eqToHom h).fiber = eqToHom (by subst h; simp) := by
  subst h; simp

lemma eqToHom_eq_mk {X Y : ∫ F} (hF : X = Y) :
    eqToHom hF = Hom.mk (eqToHom (by subst hF; rfl)) (eqToHom (by subst hF; simp)) := by
  subst hF
  simp [Hom.mk, CategoryStruct.id, Hom.id, base]

section

variable (F)

/-- The forgetful functor from `∫ F` to the source category. -/
def forget : ∫ F ⥤ C := Pseudofunctor.Grothendieck.forget _

@[simp] lemma forget_obj (X : ∫ F) :
    (forget _).obj X = X.base :=
  Pseudofunctor.Grothendieck.forget_obj _ _

@[simp] lemma forget_map {X Y : ∫ F} (f : X ⟶ Y) :
    (forget _).map f = f.base :=
  Pseudofunctor.Grothendieck.forget_map _ _

end

section ext

theorem hext {x y : ∫ F} (hbase : x.base = y.base) (hfiber : HEq x.fiber y.fiber) : x = y := by
  rcases x with ⟨xbase, xfiber⟩
  subst hbase
  subst hfiber
  rfl

theorem hext_iff {x y : ∫ F} : x.base = y.base ∧ HEq x.fiber y.fiber
    ↔ x = y := by
  constructor
  · intro ⟨ hα , hstr ⟩
    exact hext hα hstr
  · intro hCD
    subst hCD
    exact ⟨ rfl , HEq.rfl ⟩

theorem Hom.hext {X Y : ∫ F} (f g : Hom X Y) (w_base : f.base = g.base)
    (w_fiber : HEq f.fiber g.fiber) : f = g := by
  cases f; cases g
  congr

theorem Hom.hext_iff (x y : ∫ F) (f g : x ⟶ y) :
    f.base = g.base ∧ HEq f.fiber g.fiber ↔ f = g := by
  constructor
  · intro h
    exact Hom.hext _ _ h.1 h.2
  · aesop

variable {F' : C ⥤ Cat.{v₂, u₂}}

theorem hext' (h : F = F') {x : ∫ F} {y : ∫ F'}
    (hbase : HEq x.base y.base) (hfiber : HEq x.fiber y.fiber) : HEq x y := by
  rcases x; rcases y
  subst hbase
  congr

theorem Hom.hext' (h : F = F') {X Y : ∫ F} {X' Y' : ∫ F'} (hX : HEq X X') (hY : HEq Y Y')
    (f : Hom X Y) (g : Hom X' Y') (w_base : HEq f.base g.base) (w_fiber : HEq f.fiber g.fiber) :
    HEq f g := by
  cases f; cases g
  congr

theorem FunctorTo.hext (G H : D ⥤ ∫ F)
    (hbase : G ⋙ forget _ = H ⋙ forget _)
    (hfiber_obj : ∀ x : D, HEq (G.obj x).fiber (H.obj x).fiber)
    (hfiber_map : ∀ {x y : D} (f : x ⟶ y), HEq (G.map f).fiber (H.map f).fiber)
    : G = H := by
  fapply CategoryTheory.Functor.ext
  · intro x
    apply Grothendieck.hext
    · exact Functor.congr_obj hbase x
    · apply hfiber_obj
  · intro x y f
    fapply Grothendieck.Hom.hext
    · simp only [Hom.comp_base, base_eqToHom]
      exact Functor.congr_hom hbase f
    · simp only [Hom.comp_fiber, fiber_eqToHom, eqToHom_map, heq_eqToHom_comp_iff,
        heq_comp_eqToHom_iff]
      rw! [base_eqToHom, eqToHom_map, hfiber_map f, Cat.map_eqToHom]
      simp

end ext
section Transport

/--
If `F : C ⥤ Cat` is a functor and `t : c ⟶ d` is a morphism in `C`, then `transport` maps each
`c`-based element of `∫ F` to a `d`-based element.
-/
def transport (x : ∫ F) {c : C} (t : x.base ⟶ c) : ∫ F :=
  mk c ((F.map t).obj x.fiber)

@[simp]
def transport_base (x : ∫ F) {c : C} (t : x.base ⟶ c) : (transport x t).base = c := by
  rfl

@[simp]
def transport_fiber (x : ∫ F) {c : C} (t : x.base ⟶ c) :
    (transport x t).fiber = (F.map t).obj x.fiber := by
  rfl

/--
If `F : C ⥤ Cat` is a functor and `t : c ⟶ d` is a morphism in `C`, then `transport` maps each
`c`-based element `x` of `∫ F` to a `d`-based element `x.transport t`.

`toTransport` is the morphism `x ⟶ x.transport t` induced by `t` and the identity on fibers.
-/
def toTransport (x : ∫ F) {c : C} (t : x.base ⟶ c) : x ⟶ x.transport t :=
  Hom.mk t (𝟙 _)

@[simp]
def toTransport_base (x : ∫ F) {c : C} (t : x.base ⟶ c) : (toTransport x t).base = t := by
  rfl

@[simp]
def toTransport_fiber (x : ∫ F) {c : C} (t : x.base ⟶ c) :
    (toTransport x t).fiber = 𝟙 _ := by
  rfl

/--
Construct an isomorphism in a Grothendieck construction from isomorphisms in its base and fiber.
-/
def isoMk {X Y : ∫ F} (e₁ : X.base ≅ Y.base)
    (e₂ : (F.map e₁.hom).obj X.fiber ≅ Y.fiber) :
    X ≅ Y where
  hom := Hom.mk e₁.hom e₂.hom
  inv := Hom.mk e₁.inv ((F.map e₁.inv).map e₂.inv ≫
    eqToHom (Functor.congr_obj (F.mapIso e₁).hom_inv_id X.fiber))
  hom_inv_id := by apply Hom.ext; all_goals simp
  inv_hom_id := by
    apply Hom.ext
    · have := Functor.congr_hom (F.mapIso e₁).inv_hom_id e₂.inv
      simp only [mapIso_inv, mapIso_hom, Cat.comp_map] at this
      simp [this]
    · simp

@[simp]
lemma isoMk_hom_base {X Y : ∫ F} (e₁ : X.base ≅ Y.base)
    (e₂ : (F.map e₁.hom).obj X.fiber ≅ Y.fiber) :
    (isoMk e₁ e₂).hom.base = e₁.hom :=
  rfl

@[simp]
lemma isoMk_hom_fiber {X Y : ∫ F} (e₁ : X.base ≅ Y.base)
    (e₂ : (F.map e₁.hom).obj X.fiber ≅ Y.fiber) :
    (isoMk e₁ e₂).hom.fiber = e₂.hom :=
  rfl

@[simp]
lemma isoMk_inv_base {X Y : ∫ F} (e₁ : X.base ≅ Y.base)
    (e₂ : (F.map e₁.hom).obj X.fiber ≅ Y.fiber) :
    (isoMk e₁ e₂).inv.base = e₁.inv :=
  rfl

@[simp]
lemma isoMk_inv_fiber {X Y : ∫ F} (e₁ : X.base ≅ Y.base)
    (e₂ : (F.map e₁.hom).obj X.fiber ≅ Y.fiber) :
    (isoMk e₁ e₂).inv.fiber = (F.map e₁.inv).map e₂.inv ≫ eqToHom (by
      simp [← Functor.comp_obj, ← Cat.comp_eq_comp, ← Functor.map_comp]) := by
  rfl

/--
If `F : C ⥤ Cat` and `x : ∫ F`, then every `C`-isomorphism `α : x.base ≅ c` induces
an isomorphism between `x` and its transport along `α`
-/
def transportIso (x : ∫ F) {c : C} (α : x.base ≅ c) :
    x.transport α.hom ≅ x := (isoMk α (Iso.refl _)).symm

@[simp]
lemma transportIso_hom_base (x : ∫ F) {c : C} (α : x.base ≅ c) :
    (x.transportIso α).hom.base = α.inv :=
  rfl

@[simp]
lemma transportIso_hom_fiber (x : ∫ F) {c : C} (α : x.base ≅ c) :
    (x.transportIso α).hom.fiber =
    eqToHom (by simp [transportIso, ← Functor.comp_obj, ← Cat.comp_eq_comp]) := by
  simp only [transportIso, Iso.symm_hom, isoMk_inv_fiber, Iso.refl_inv]
  erw [Functor.map_id] -- FIXME: does not fire in simp
  simp

@[simp]
lemma transportIso_inv_base (x : ∫ F) {c : C} (α : x.base ≅ c) :
    (x.transportIso α).inv.base = α.hom :=
  rfl

@[simp]
lemma transportIso_inv_fiber (x : ∫ F) {c : C} (α : x.base ≅ c) :
    (x.transportIso α).inv.fiber = 𝟙 ((F.map α.hom).obj x.fiber) :=
  rfl

end Transport

section

variable {G H : C ⥤ Cat.{v₂,u₂}}

/-- The Grothendieck construction is functorial: a natural transformation `α : F ⟶ G` induces
a functor `Grothendieck.map : ∫ F ⥤ ∫ G`.
Note the more general version `Pseudofunctor.Grothendieck.map` can produce such a functor
`∫ F ⥤ ∫ G` while only requiring `α` to be a strong transformation between `F` and `G`
as pseudofunctors.
-/
def map (α : F ⟶ G) : ∫ F ⥤ ∫ G :=
  Pseudofunctor.Grothendieck.map α.toStrongTrans'

variable {α : F ⟶ G}

@[simp]
lemma map_obj_base (a : ∫ F) :
    ((map α).obj a).base = a.base :=
  rfl

@[simp]
lemma map_obj_fiber (a : ∫ F) :
    ((map α).obj a).fiber = (α.app a.base).obj a.fiber :=
  rfl

@[simp]
lemma map_map_base {a b : ∫ F} (f : a ⟶ b) :
    ((map α).map f).base = f.base :=
  rfl

@[simp]
lemma map_map_fiber {a b : ∫ F} (f : a ⟶ b) :
    ((map α).map f).fiber = eqToHom (Functor.congr_obj (α.naturality f.base).symm a.fiber) ≫
    (α.app b.base).map f.fiber := by
  dsimp only [map, Hom.fiber]
  aesop_cat

/-- The functor `Grothendieck.map α : ∫ F ⥤ ∫ G` lies over `C`. -/
@[simp]
theorem map_comp_forget {α : F ⟶ G} :
    Grothendieck.map α ⋙ Grothendieck.forget G = Grothendieck.forget F := rfl

theorem map_id_eq : map (𝟙 F) = 𝟙 (Cat.of <| Grothendieck <| F) := by
  apply FunctorTo.hext
  all_goals simp [Cat.id_eq_id, Functor.id_comp]

/-- Making the equality of functors into an isomorphism. Note: we should avoid equality of functors
if possible, and we should prefer `mapIdIso` to `map_id_eq` whenever we can. -/
def mapIdIso : map (𝟙 F) ≅ 𝟙 (Cat.of <| Grothendieck <| F) := eqToIso map_id_eq

theorem map_comp_eq (α : F ⟶ G) (β : G ⟶ H) :
    map (α ≫ β) = map α ⋙ map β := by
  apply FunctorTo.hext
  all_goals simp [Functor.assoc]

/-- Making the equality of functors into an isomorphism. Note: we should avoid equality of functors
if possible, and we should prefer `map_comp_iso` to `map_comp_eq` whenever we can. -/
def mapCompIso (α : F ⟶ G) (β : G ⟶ H) : map (α ≫ β) ≅ map α ⋙ map β := eqToIso (map_comp_eq α β)

end

/-- The Grothendieck construction as a functor from the functor category `E ⥤ Cat` to the
over category `Over E`. -/
def functor {E : Cat.{v, u}} : (E ⥤ Cat.{v,u}) ⥤ Over (T := Cat.{v,u}) E where
  obj F := Over.mk (X := E) (Y := Cat.of (∫ F)) (Grothendieck.forget F)
  map {_ _} α := Over.homMk (X:= E) (Grothendieck.map α) Grothendieck.map_comp_forget
  map_id F := by
    ext
    exact Grothendieck.map_id_eq (F := F)
  map_comp α β := by
    simp [Grothendieck.map_comp_eq α β]
    rfl

section Elements
variable (G : C ⥤ Type w)

/-- Auxiliary definition for `grothendieckTypeToCat`, to speed up elaboration. -/
@[simps!]
def grothendieckTypeToCatFunctor : ∫(G ⋙ typeToCat) ⥤ G.Elements where
  obj X := ⟨X.1, X.2.as⟩
  map f := ⟨f.1, f.2.1.1⟩

/-- Auxiliary definition for `grothendieckTypeToCat`, to speed up elaboration. -/
def grothendieckTypeToCatInverse : G.Elements ⥤ ∫(G ⋙ typeToCat) where
  obj X := mk X.1 ⟨X.2⟩
  map f := Hom.mk f.1 ⟨⟨f.2⟩⟩

@[simp]
lemma grothendieckTypeToCatInverse_obj_base (X : G.Elements) :
    ((grothendieckTypeToCatInverse G).obj X).base = X.1 :=
  rfl

@[simp]
lemma grothendieckTypeToCatInverse_obj_fiber_as (X : G.Elements) :
    ((grothendieckTypeToCatInverse G).obj X).fiber.as = X.2 :=
  rfl

@[simp]
lemma grothendieckTypeToCatInverse_map_base {X Y : G.Elements} (f : X ⟶ Y) :
    ((grothendieckTypeToCatInverse G).map f).base = f.1 :=
  rfl

/-- The Grothendieck construction applied to a functor to `Type`
(thought of as a functor to `Cat` by realising a type as a discrete category)
is the same as the 'category of elements' construction.
-/
@[simps!]
def grothendieckTypeToCat : ∫(G ⋙ typeToCat) ≌ G.Elements where
  functor := grothendieckTypeToCatFunctor G
  inverse := grothendieckTypeToCatInverse G
  unitIso :=
    NatIso.ofComponents
      (fun X => by
        rcases X with ⟨_, ⟨⟩⟩
        exact Iso.refl _)
      (by
        rintro ⟨_, ⟨⟩⟩ ⟨_, ⟨⟩⟩ ⟨base, ⟨⟨f⟩⟩⟩
        dsimp at *
        simp
        rfl)
  counitIso :=
    NatIso.ofComponents
      (fun X => by
        cases X
        exact Iso.refl _)
      (by
        rintro ⟨⟩ ⟨⟩ ⟨f, e⟩
        dsimp at *
        simp
        rfl)
  functor_unitIso_comp := by
    rintro ⟨_, ⟨⟩⟩
    simp
    rfl

end Elements

section functorTo
variable (A : D ⥤ C) (fibObj : (x : D) → (A ⋙ F).obj x)
    (fibMap : {x y : D} → (f : x ⟶ y) → ((A ⋙ F).map f).obj (fibObj x) ⟶ fibObj y)

theorem functorTo_map_id_aux (x : D) : ((A ⋙ F).map (𝟙 x)).obj (fibObj x) = fibObj x := by
  simp

theorem functorTo_map_comp_aux {x y z : D} (f : x ⟶ y) (g : y ⟶ z) :
    ((A ⋙ F).map (f ≫ g)).obj (fibObj x)
    = (F.map (A.map g)).obj (((A ⋙ F).map f).obj (fibObj x)) := by
  simp

section
variable
    (map_id : (x : D) → fibMap (CategoryStruct.id x)
      = eqToHom (functorTo_map_id_aux A fibObj x))
    (map_comp : {x y z : D} → (f : x ⟶ y) → (g : y ⟶ z) → fibMap (f ≫ g)
      = eqToHom (functorTo_map_comp_aux A fibObj f g)
      ≫ (F.map (A.map g)).map (fibMap f) ≫ fibMap g)

/--
Define a functor into `∫ F` by providing a functor into the base cateogry,
as well as the actions on fibers. -/
def functorTo : D ⥤ Grothendieck F where
  obj x := mk (A.obj x) (fibObj x)
  map f := Hom.mk (A.map f) (fibMap f)
  map_id x := Hom.ext _ _ (by simp) (by simp [map_id])
  map_comp f g := Hom.ext _ _ (by simp) (by simp [map_comp])

@[simp] theorem functorTo_obj_base (x) :
    ((functorTo A fibObj fibMap map_id map_comp).obj x).base = A.obj x :=
  rfl

@[simp] theorem functorTo_obj_fiber (x) :
    ((functorTo A fibObj fibMap map_id map_comp).obj x).fiber = fibObj x :=
  rfl

@[simp] theorem functorTo_map_base {x y} (f : x ⟶ y) :
    ((functorTo A fibObj fibMap map_id map_comp).map f).base = A.map f :=
  rfl

@[simp] theorem functorTo_map_fiber {x y} (f : x ⟶ y) :
    ((functorTo A fibObj fibMap map_id map_comp).map f).fiber = fibMap f :=
  rfl

variable {A} {fibObj} {fibMap} {map_id} {map_comp}
@[simp] theorem functorTo_forget :
    functorTo _ _ _ map_id map_comp ⋙ Grothendieck.forget _ = A :=
  rfl

end

end functorTo

section

variable {G : D ⥤ C}

/-- Applying a functor `G : D ⥤ C` to the base of the Grothendieck construction induces a functor
`∫(G ⋙ F) ⥤ ∫ F`. -/
def pre (F) (G : D ⥤ C) : ∫ (G ⋙ F) ⥤ ∫ F :=
  functorTo (forget _ ⋙ G) (fun x => x.fiber) (fun f => f.fiber)
  (Hom.id_fiber) (Hom.comp_fiber)

@[simp]
lemma pre_obj_base (x) : ((pre F G).obj x).base = G.obj x.base := by
  aesop
  -- simp [pre] -- FIXME: functorTo_obj_base does not fire
  -- rw [functorTo_obj_base] -- fires but creates an extra (already proven) goal
  -- · simp
  -- · aesop_cat

@[simp]
lemma pre_obj_fiber (x) : ((pre F G).obj x).fiber = x.fiber := by
  aesop_cat

@[simp]
lemma pre_map_base {x y} (f : x ⟶ y) : ((pre F G).map f).base = G.map f.base := by
  aesop_cat

@[simp]
lemma pre_map_fiber {x y} (f : x ⟶ y) : ((pre F G).map f).fiber = f.fiber := by
  aesop_cat

@[simp]
theorem pre_id : pre F (𝟭 C) = 𝟭 _ := rfl

end

variable (F)

section

variable {G H : D ⥤ C} (α : G ≅ H)
/--
An natural isomorphism between functors `G ≅ H` induces a natural isomorphism between the canonical
morphism `pre F G` and `pre F H`, up to composition with
`∫(G ⋙ F) ⥤ ∫(H ⋙ F)`.
-/
def preNatIso : pre F G ≅ map (whiskerRight α.hom F) ⋙ (pre F H) :=
  NatIso.ofComponents
    (fun X => (transportIso (mk (G.obj X.base) X.fiber) (α.app X.base)).symm)
    (fun {X Y} f => by
      fapply Hom.ext
      · simp only [comp_obj, mk_base, Iso.app_hom, Iso.symm_hom, Hom.comp_base, pre_map_base,
          comp_map, map_obj_base, map_map_base]
        erw [transportIso_inv_base, transportIso_inv_base] -- FIXME
        simp
      · simp
        erw [transportIso_inv_fiber, transportIso_inv_fiber, Category.comp_id, Functor.map_id,
          Functor.congr_hom (F.congr_map (transportIso_inv_base (mk (G.obj Y.base) Y.fiber)
          (α.app Y.base)))] -- FIXME
        simp)

@[simp] theorem preNatIso_hom_app_base (x) :
    ((preNatIso F α).hom.app x).base = α.hom.app x.base := by
  simp [preNatIso, transportIso_inv_base (mk (G.obj x.base) x.fiber)]
  --FIXME: why does variable have to be explicit?

@[simp] theorem preNatIso_hom_app_fiber (x) :
    ((preNatIso F α).hom.app x).fiber = 𝟙 _ := by
  simp [preNatIso, transportIso_inv_fiber (mk (G.obj x.base) x.fiber)]
  rfl --FIXME

theorem preNatIso_congr {G H : D ⥤ C} {α β : G ≅ H} (h : α = β) :
    preNatIso F α = preNatIso F β ≪≫ eqToIso (by subst h; simp) := by
  subst h
  simp

@[simp] theorem preNatIso_eqToIso {G H : D ⥤ C} {h : G = H} :
    preNatIso F (eqToIso h) =
    eqToIso (by subst h; simp [map_id_eq, Cat.id_eq_id, Functor.id_comp]) := by
  subst h
  ext
  fapply Hom.ext
  · simp
    rfl
  · simp only [eqToIso_refl, Iso.refl_hom, comp_obj, eqToIso.hom, preNatIso_hom_app_fiber,
      Category.comp_id]
    rw! [eqToHom_app, fiber_eqToHom]

theorem preNatIso_comp {G1 G2 G3 : D ⥤ C} (α : G1 ≅ G2) (β : G2 ≅ G3) :
    preNatIso F (α ≪≫ β) = preNatIso F α ≪≫ isoWhiskerLeft _ (preNatIso F β) ≪≫
    eqToIso (by simp [map_comp_eq, Functor.assoc]) := by
  ext
  fapply Hom.ext
  · simp
  · simp only [Iso.trans_hom, eqToIso.hom, NatTrans.comp_app]
    rw! [eqToHom_app]
    simp

end

/--
Given an equivalence of categories `G`, `preInv _ G` is the (weak) inverse of the `pre _ G.functor`.
-/
def preInv (G : D ≌ C) : ∫ F ⥤ ∫(G.functor ⋙ F) :=
  map (whiskerRight G.counitInv F) ⋙ Grothendieck.pre (G.functor ⋙ F) G.inverse

lemma pre_comp_map (G : D ⥤ C) {H : C ⥤ Cat} (α : F ⟶ H) :
    pre F G ⋙ map α = map (whiskerLeft G α) ⋙ pre H G := rfl

lemma pre_comp_forget (G : D ⥤ C) : pre F G ⋙ forget _ = forget _ ⋙ G :=
  rfl

variable {F} in
lemma pre_comp_map_assoc (G : D ⥤ C) {H : C ⥤ Cat} (α : F ⟶ H) {E : Type*} [Category E]
    (K : ∫ H ⥤ E) : pre F G ⋙ map α ⋙ K= map (whiskerLeft G α) ⋙ pre H G ⋙ K := rfl

variable {E : Type*} [Category E] in
@[simp]
lemma pre_comp (G : D ⥤ C) (H : E ⥤ D) : pre F (H ⋙ G) = pre (G ⋙ F) H ⋙ pre F G := rfl

/--
Let `G` be an equivalence of categories. The functor induced via `pre` by `G.functor ⋙ G.inverse`
is naturally isomorphic to the functor induced via `map` by a whiskered version of `G`'s inverse
unit.
-/
protected def preUnitIso (G : D ≌ C) :
    map (whiskerRight G.unitInv _) ≅ pre (G.functor ⋙ F) (G.functor ⋙ G.inverse) :=
  preNatIso _ G.unitIso.symm |>.symm

/--
Given a functor `F : C ⥤ Cat` and an equivalence of categories `G : D ≌ C`, the functor
`pre F G.functor` is an equivalence between `∫ (G.functor ⋙ F)` and `∫ F`.
-/
def preEquivalence (G : D ≌ C) : ∫ (G.functor ⋙ F) ≌ ∫ F where
  functor := pre F G.functor
  inverse := preInv F G
  unitIso := by
    refine (eqToIso ?_)
      ≪≫ (Grothendieck.preUnitIso F G |> isoWhiskerLeft (map _))
      ≪≫ (pre_comp_map_assoc G.functor _ _ |> Eq.symm |> eqToIso)
    calc
      _ = map (𝟙 _) := map_id_eq.symm
      _ = map _ := ?_
      _ = map _ ⋙ map _ := map_comp_eq _ _
    congr; ext X
    simp only [Functor.comp_obj, Functor.comp_map, ← Functor.map_comp, Functor.id_obj,
      Functor.map_id, NatTrans.comp_app, NatTrans.id_app, whiskerLeft_app, whiskerRight_app,
      Equivalence.counitInv_functor_comp]
  counitIso := preNatIso F G.counitIso.symm |>.symm
  functor_unitIso_comp X := by
    simp [preNatIso, transportIso, Grothendieck.preUnitIso]
    rw! (castMode := .all) [pre_obj_base, pre_obj_base, pre_obj_base]
      -- FIXME: pre_obj_base not firing. motive not type correct
    fapply Hom.ext
    · simp
      rfl
    · simp only [Hom.id_base, Hom.comp_base, Hom.comp_fiber, fiber_eqToHom, eqToHom_map,
      pre_map_fiber, isoMk_inv_fiber, comp_obj, map_obj_base, Iso.app_inv, Iso.symm_inv, comp_map,
      map_obj_fiber, whiskerRight_app, id_obj, whiskerLeft_app, Iso.app_hom, Iso.symm_hom,
      Iso.refl_inv, map_id, Category.id_comp, eqToHom_trans_assoc, Hom.id_fiber]
      erw [Functor.map_id (F.map (G.counitIso.hom.app ((pre F G.functor).obj X).base))]
      conv => left; right; left; rw! [← eqToHom_refl]
      simp [- eqToHom_refl]

variable {F} in
/--
Let `F, F' : C ⥤ Cat` be functor, `G : D ≌ C` an equivalence and `α : F ⟶ F'` a natural
transformation.

Left-whiskering `α` by `G` and then taking the Grothendieck construction is, up to isomorphism,
the same as taking the Grothendieck construction of `α` and using the equivalences `pre F G`
and `pre F' G` to match the expected type:

```
∫(G.functor ⋙ F) ≌ ∫ F ⥤ ∫ F' ≌ ∫(G.functor ⋙ F')
```
-/
def mapWhiskerLeftIsoConjPreMap {F' : C ⥤ Cat} (G : D ≌ C) (α : F ⟶ F') :
    map (whiskerLeft G.functor α) ≅
      (preEquivalence F G).functor ⋙ map α ⋙ (preEquivalence F' G).inverse :=
  (Functor.rightUnitor _).symm ≪≫ isoWhiskerLeft _ (preEquivalence F' G).unitIso

section FunctorFrom

variable {E : Type*} [Category E] (c : C)

/-- The inclusion of a fiber `F.obj c` of a functor `F : C ⥤ Cat` into its Grothendieck
construction. -/
def ι : F.obj c ⥤ ∫ F :=
  functorTo ((const (F.obj c)).obj c) id (fun f => eqToHom (by simp) ≫ f) (by simp)
  (by simp [Functor.congr_hom (F.map_id _)])

variable {F} {c}

@[simp]
lemma ι_obj_base (x) : ((ι F c).obj x).base = c := by
  rw [ι, functorTo_obj_base] -- FIXME: `functorTo_obj_base` creates extra (already proven) goal
  · simp
  · simp [Functor.congr_hom (F.map_id _)]

@[simp]
lemma ι_obj_fiber (x) : ((ι F c).obj x).fiber = x := by
  dsimp [ι]
  rw [functorTo_obj_fiber] -- FIXME: `functorTo_obj_base` creates extra (already proven) goal
  · simp
  · simp [Functor.congr_hom (F.map_id _)]

@[simp]
lemma ι_map_base {x y} (f : x ⟶ y) : ((ι F c).map f).base = 𝟙 _ := by
  dsimp [ι]
  rw [functorTo_map_base] -- FIXME: `functorTo_obj_base` creates extra (already proven) goal
  · simp
    rfl
  · simp [Functor.congr_hom (F.map_id _)]

@[simp]
lemma ι_map_fiber {x y} (f : x ⟶ y) : ((ι F c).map f).fiber = eqToHom (by simp) ≫ f := by
  dsimp [ι]
  rw [functorTo_map_fiber] -- FIXME: `functorTo_obj_base` creates extra (already proven) goal
  simp [Functor.congr_hom (F.map_id _)]

instance faithful_ι (c : C) : (ι F c).Faithful where
  map_injective f := by
    injection f with _ f
    rwa [cancel_epi] at f

@[simp] theorem ι_comp_forget : ι F c ⋙ forget _ = (const (F.obj c)).obj c :=
  rfl

@[simp] theorem ι_comp_pre (G : D ⥤ C) (x : D)
    : ι (G ⋙ F) x ⋙ pre F G = ι F (G.obj x) := by
  apply Grothendieck.FunctorTo.hext
  · rw [ι_comp_forget, Functor.assoc, pre_comp_forget, ← Functor.assoc, ι_comp_forget]
    apply Functor.ext <;> simp
  · simp
  · simp

section ιNatTrans

variable {X Y : C} (f : X ⟶ Y)

/-- Every morphism `f : X ⟶ Y` in the base category induces a natural transformation from the fiber
inclusion `ι F X` to the composition `F.map f ⋙ ι F Y`. -/
def ιNatTrans : ι F X ⟶ F.map f ⋙ ι F Y where
  app _ := Hom.mk f (𝟙 _)
  naturality _ _ _ := Hom.ext _ _ (by simp) (by simp [eqToHom_map])

@[simp]
lemma ιNatTrans_app_base (x : F.obj X) : ((ιNatTrans f).app x).base = f :=
  rfl

@[simp]
lemma ιNatTrans_app_fiber (x : F.obj X) : ((ιNatTrans f).app x).fiber = 𝟙 _ :=
  rfl

@[simp]
theorem ιNatTrans_id_app {X : C} {a : F.obj X} :
    (@ιNatTrans _ _ F _ _ (𝟙 X)).app a = eqToHom (by simp) :=
  Hom.ext _ _ (by simp; rfl) (by simp)

lemma ιNatTrans_comp_app {X Y Z : C} {f : X ⟶ Y} {g : Y ⟶ Z} {a} :
    (@ιNatTrans _ _ F _ _ (f ≫ g)).app a =
    (@ιNatTrans _ _ F _ _ f).app a ≫
    (@ιNatTrans _ _ F _ _ g).app ((F.map f).obj a) ≫ eqToHom (by simp) :=
  Hom.ext _ _ (by simp) (by simp)

end ιNatTrans

variable (fib : ∀ c, F.obj c ⥤ E) (hom : ∀ {c c' : C} (f : c ⟶ c'), fib c ⟶ F.map f ⋙ fib c')
variable (hom_id : ∀ c, hom (𝟙 c) = eqToHom (by simp only [Functor.map_id]; rfl))
variable (hom_comp : ∀ c₁ c₂ c₃ (f : c₁ ⟶ c₂) (g : c₂ ⟶ c₃), hom (f ≫ g) =
  hom f ≫ whiskerLeft (F.map f) (hom g) ≫ eqToHom (by simp only [Functor.map_comp]; rfl))

/-- Construct a functor from `∫ F` to another category `E` by providing a family of
functors on the fibers of `∫ F`, a family of natural transformations on morphisms in the
base of `∫ F` and coherence data for this family of natural transformations. -/
@[simps]
def functorFrom : ∫ F ⥤ E where
  obj X := (fib X.base).obj X.fiber
  map {X Y} f := (hom f.base).app X.fiber ≫ (fib Y.base).map f.fiber
  map_id X := by simp [hom_id]
  map_comp f g := by simp [hom_comp]

/-- `Grothendieck.ι F c` composed with `Grothendieck.functorFrom` is isomorphic a functor on a fiber
on `F` supplied as the first argument to `Grothendieck.functorFrom`. -/
def ιCompFunctorFrom (c : C) : ι F c ⋙ (functorFrom fib hom hom_id hom_comp) ≅ fib c :=
  NatIso.ofComponents (fun _ => Iso.refl _) (fun f => by
    simp only [comp_obj, functorFrom_obj, comp_map, functorFrom_map, ι_map_fiber, map_comp,
      eqToHom_map, Iso.refl_hom, Category.comp_id, Category.id_comp]
    rw! [ι_map_base]
    simp [hom_id]
    rfl)

end FunctorFrom

/-- The fiber inclusion `ι F c` composed with `map α` is isomorphic to `α.app c ⋙ ι F' c`. -/
@[simps!]
def ιCompMap {F' : C ⥤ Cat} (α : F ⟶ F') (c : C) : ι F c ⋙ map α ≅ α.app c ⋙ ι F' c :=
  NatIso.ofComponents (fun X => Iso.refl _) (fun f => by
    apply Hom.ext
    · simp
      rw! [Functor.map_id]
      simp
      rfl -- FIXME
    · simp
      rfl
  )

section AsSmall

attribute [-simp] AsSmall.down_obj AsSmall.down_map

/-- The inverse functor to build the equivalence `compAsSmallFunctorEquivalence`. -/
@[simp] def compAsSmallFunctorEquivalenceInverse :
    ∫ F ⥤ ∫(F ⋙ Cat.asSmallFunctor.{w}) :=
  functorTo (forget _) (fun X => (AsSmall.up.obj X.fiber)) (fun f => (AsSmall.up.map f.fiber))
  (by simp) (by intros; simp; rfl)

/-- The functor to build the equivalence `compAsSmallFunctorEquivalence`. -/
@[simp] def compAsSmallFunctorEquivalenceFunctor :
    ∫(F ⋙ Cat.asSmallFunctor.{w}) ⥤ ∫ F :=
  functorTo (forget _) (fun X => (AsSmall.down.obj X.fiber)) (fun f => (AsSmall.down.map f.fiber))
  (by intros; simp; apply eqToHom_map) -- FIXME: eqToHom_map does not fire under simp
  (by
    intros
    simp [Functor.map_comp]
    rfl)
  -- FIXME: these AsSmall goals are awful. Need to add some evil lemmas for AsSmall.up, AsSmall.down

/-- Taking the Grothendieck construction on `F ⋙ asSmallFunctor`, where
`asSmallFunctor : Cat ⥤ Cat` is the functor which turns each category into a small category of a
(potentiall) larger universe, is equivalent to the Grothendieck construction on `F` itself. -/
@[simps]
def compAsSmallFunctorEquivalence :
    Grothendieck (F ⋙ Cat.asSmallFunctor.{w}) ≌ ∫ F where
  functor := compAsSmallFunctorEquivalenceFunctor F
  inverse := compAsSmallFunctorEquivalenceInverse F
  counitIso := Iso.refl _
  unitIso := Iso.refl _

namespace AsSmall

@[simp] theorem up_map_down_map
    {C : Type u₁} [Category.{v₁, u₁} C] {X Y : C} (f : X ⟶ Y) :
  AsSmall.down.map (AsSmall.up.map f) = f := rfl

@[simp] theorem down_map_up_map
    {C : Type u₁} [Category.{v₁, u₁} C]
    {X Y : AsSmall C} (f : X ⟶ Y) :
  AsSmall.up.map (AsSmall.down.map f) = f := rfl

theorem comp_up_inj {C : Type u} [Category.{v} C]
  {D : Type u₁} [Category.{v₁} D]
    {F G : C ⥤ D}
    (h : F ⋙ (AsSmall.up : D ⥤ AsSmall.{w} D) =
      G ⋙ AsSmall.up)
    : F = G := by
  convert_to F ⋙ (AsSmall.up : D ⥤ AsSmall.{w} D)
    ⋙ AsSmall.down
    = G ⋙ (AsSmall.up : D ⥤ AsSmall.{w} D)
    ⋙ AsSmall.down
  simp [← Functor.assoc, h]

theorem comp_down_inj {C : Type u} [Category.{v} C]
  {D : Type u₁} [Category.{v₁} D]
    {F G : C ⥤ AsSmall.{w} D}
    (h : F ⋙ AsSmall.down = G ⋙ AsSmall.down)
    : F = G := by
  convert_to F ⋙ AsSmall.down
    ⋙ AsSmall.up
    = G ⋙ AsSmall.down ⋙ AsSmall.up
  simp [← Functor.assoc, h]

@[simp] theorem up_comp_down
    {C : Type u₁} [Category.{v₁, u₁} C] :
  AsSmall.up ⋙ AsSmall.down = Functor.id C := rfl

@[simp] theorem down_comp_up
    {C : Type u₁} [Category.{v₁, u₁} C] :
  AsSmall.down ⋙ AsSmall.up = Functor.id (AsSmall C) := rfl

instance {C : Type u} [Category.{v} C] :
    Functor.IsEquivalence (AsSmall.up : C ⥤ AsSmall C) :=
  AsSmall.equiv.isEquivalence_functor

end AsSmall

variable {F G} in
/-- Mapping a Grothendieck construction along the whiskering of any natural transformation
`α : F ⟶ G` with the functor `asSmallFunctor : Cat ⥤ Cat` is naturally isomorphic to conjugating
`map α` with the equivalence between `Grothendieck (F ⋙ asSmallFunctor)` and `∫ F`. -/
def mapWhiskerRightAsSmallFunctor (α : F ⟶ G) :
    map (whiskerRight α Cat.asSmallFunctor.{w}) ≅
    (compAsSmallFunctorEquivalence F).functor ⋙ map α ⋙
      (compAsSmallFunctorEquivalence G).inverse :=
  NatIso.ofComponents
    (fun X => Iso.refl _)
    (fun f => by
      simp only [compAsSmallFunctorEquivalence_functor, compAsSmallFunctorEquivalenceFunctor,
        comp_obj, comp_map, compAsSmallFunctorEquivalence_inverse,
        compAsSmallFunctorEquivalenceInverse, Cat.of_α, Iso.refl_hom, Category.comp_id,
        Category.id_comp]
      fapply Hom.ext
      · simp only [map_obj_base, map_map_base]
        rw [functorTo_map_base] -- FIXME: doesn't fire in simp, generates extra goal
        · simp only [forget_map, map_map_base]
          rw [functorTo_map_base]
          · simp
          · sorry -- should be automatic
        · sorry -- should be automatic
      · simp only [map_obj_base, comp_obj, Cat.asSmallFunctor_obj, Cat.of_α, comp_map,
        Cat.asSmallFunctor_map, map_obj_fiber, whiskerRight_app, map_map_base, eqToHom_refl,
        map_map_fiber, Cat.comp_obj, Category.id_comp]
        rw! [functorTo_map_fiber] -- FIXME: doesn't fire in simp, generates extra goal
        · simp only [map_obj_fiber, map_map_fiber, Cat.comp_obj, map_comp, eqToHom_map]
          rw! [functorTo_map_fiber] -- FIXME: doesn't fire in simp, generates extra goal
          · rfl -- FIXME: heavy rfl?
          · sorry -- should be automatic
        · sorry -- should be automatic
      )

-- /-- Mapping a Grothendieck construction along the whiskering of any natural transformation
-- `α : F ⟶ G` with the functor `asSmallFunctor : Cat ⥤ Cat` is naturally isomorphic to conjugating
-- `map α` with the equivalence between `Grothendieck (F ⋙ asSmallFunctor)` and `∫ F`. -/
-- def mapWhiskerRightAsSmallFunctor (α : F ⟶ G) :
--     map (whiskerRight α Cat.asSmallFunctor.{w}) ≅
--     (compAsSmallFunctorEquivalence F).functor ⋙ map α ⋙
--       (compAsSmallFunctorEquivalence G).inverse :=
--   NatIso.ofComponents
--     (fun X => Iso.refl _)
--     (fun f => by
--       simp only [compAsSmallFunctorEquivalence_functor, compAsSmallFunctorEquivalenceFunctor,
--         comp_obj, comp_map, compAsSmallFunctorEquivalence_inverse,
--         compAsSmallFunctorEquivalenceInverse, Cat.of_α, Iso.refl_hom, Category.comp_id,
--         Category.id_comp]
--       fapply Hom.ext
--       · simp only [map_obj_base, map_map_base]
--         rw [functorTo_map_base] -- FIXME: doesn't fire in simp, generates extra goal
--         · simp only [forget_map, map_map_base]
--           rw [functorTo_map_base]
--           · simp
--           · sorry -- should be automatic
--         · sorry -- should be automatic
--       · simp only [map_obj_base, comp_obj, Cat.asSmallFunctor_obj, Cat.of_α, comp_map,
--         Cat.asSmallFunctor_map, map_obj_fiber, whiskerRight_app, map_map_base, eqToHom_refl,
--         map_map_fiber, Cat.comp_obj, Category.id_comp]
--         rw! [functorTo_map_fiber] -- FIXME: doesn't fire in simp, generates extra goal
--         · simp only [map_obj_fiber, map_map_fiber, Cat.comp_obj, map_comp, eqToHom_map]
--           rw! [functorTo_map_fiber] -- FIXME: doesn't fire in simp, generates extra goal
--           · simp
--             rw! (castMode := .all) [functorTo_obj_base] -- FIXME: rw! error report
--             sorry
--           · sorry -- should be automatic
--         · sorry -- should be automatic
      -- fapply Hom.ext
      -- · simp only [map_obj_base, compAsSmallFunctorEquivalence_functor,
      --   compAsSmallFunctorEquivalenceFunctor, comp_obj, comp_map,
      --   compAsSmallFunctorEquivalence_inverse, compAsSmallFunctorEquivalenceInverse, Cat.of_α,
      --   Iso.refl_hom, Category.comp_id, map_map_base, Category.id_comp]
      --   rw [functorTo_map_base] -- FIXME: doesn't fire in simp, generates extra goal
      --   · simp only [forget_map, map_map_base]
      --     rw [functorTo_map_base] -- FIXME: doesn't fire in simp, generates extra goal
      --     · simp only [forget_map]
      --     · sorry -- should be automatic
      --   · sorry -- should be automatic
      -- · simp only [compAsSmallFunctorEquivalence_functor, compAsSmallFunctorEquivalenceFunctor,
      --   comp_obj, comp_map, compAsSmallFunctorEquivalence_inverse,
      --   compAsSmallFunctorEquivalenceInverse, Cat.of_α, Cat.asSmallFunctor_obj, map_obj_base,
      --   Iso.refl_hom, Hom.comp_base, Hom.id_base, Cat.asSmallFunctor_map, map_obj_fiber,
      --   whiskerRight_app, map_map_base, Hom.comp_fiber, map_map_fiber, Cat.comp_obj, map_comp,
      --   eqToHom_map, Hom.id_fiber, Category.assoc, eqToHom_trans_assoc]
      --   rw! [functorTo_map_fiber] -- FIXME: doesn't fire in simp, generates extra goal
      --   · simp only [map_obj_fiber, map_map_fiber, Cat.comp_obj, map_comp, eqToHom_map,
      --     eqToHom_trans_assoc]
      --     rw! [functorTo_map_fiber] -- FIXME: doesn't fire in simp, generates extra goal
      --     · sorry
      --     · sorry -- should be automatic
      --   · sorry -- should be automatic
        -- )

end AsSmall

end Grothendieck

end Functor

end CategoryTheory
