import Mathlib.CategoryTheory.Whiskering
import Mathlib.CategoryTheory.EqToHom

universe v‚ÇÅ u‚ÇÅ v‚ÇÇ u‚ÇÇ v‚ÇÉ u‚ÇÉ

namespace CategoryTheory.Functor

section
variable {C : Type u‚ÇÅ} [Category.{v‚ÇÅ} C] {D : Type u‚ÇÇ} [Category.{v‚ÇÇ} D] {E : Type u‚ÇÉ}
  [Category.{v‚ÇÉ} E]

@[simp]
theorem whiskerLeft_eqToHom (F : C ‚•§ D) {G H : D ‚•§ E} (Œ∑ : G = H) :
    whiskerLeft F (eqToHom Œ∑) = eqToHom (by cases Œ∑; rfl) := by
  cases Œ∑
  simp only [whiskerLeft_id', eqToHom_refl]

@[simp]
theorem eqToHom_whiskerRight {F G : C ‚•§ D} (Œ∑ : F = G) (H : D ‚•§ E) :
    whiskerRight (eqToHom Œ∑) H = eqToHom (by cases Œ∑; rfl) := by
  cases Œ∑
  simp only [whiskerRight_id', eqToHom_refl]

end

section


variable {A B C D : Type*} [Category A] [Category B] [Category C] [Category D]
  (F : C ‚•§ A) (G : B ‚•§ D)

/--
The functor that, on objects `H : A ‚•§ B` acts by
composing left and right with functors `F ‚ãô H ‚ãô G`
         F
   A <---------  C
   |             .
   |             |
   |             .
H  |             | whiskeringLeftObjWhiskeringRightObj.obj H
   |             .
   V             V
   B ----------> D
         G
-/
def whiskeringLeftObjWhiskeringRightObj : (A ‚•§ B) ‚•§ (C ‚•§ D) :=
  (whiskeringLeft C A B).obj F ‚ãô (whiskeringRight C B D).obj G

@[simp] lemma whiskeringLeftObjWhiskeringRightObj_obj (S : A ‚•§ B) :
    (whiskeringLeftObjWhiskeringRightObj F G).obj S
    = F ‚ãô S ‚ãô G := by
  simp [whiskeringLeftObjWhiskeringRightObj, Functor.assoc]

@[simp] lemma whiskeringLeftObjWhiskeringRightObj_map {S1 S2 : A ‚•§ B} (Œ∑ : S1 ‚ü∂ S2) :
    (whiskeringLeftObjWhiskeringRightObj F G).map Œ∑
    = whiskerRight (F.whiskerLeft Œ∑) G := by
  simp [whiskeringLeftObjWhiskeringRightObj]

@[simp] lemma whiskeringLeftObjWhiskeringRightObj_id_id :
    whiskeringLeftObjWhiskeringRightObj (ùü≠ A) (ùü≠ B) = ùü≠ (A ‚•§ B) :=
  rfl

@[simp] lemma whiskeringLeftObjWhiskeringRightObj_comp_comp {C' D' : Type*} [Category C']
    [Category D'] (F' : C' ‚•§ C) (G' : D ‚•§ D') :
    whiskeringLeftObjWhiskeringRightObj (F' ‚ãô F) (G ‚ãô G')
    = whiskeringLeftObjWhiskeringRightObj F G ‚ãô whiskeringLeftObjWhiskeringRightObj F' G' :=
  rfl

end

end CategoryTheory.Functor
