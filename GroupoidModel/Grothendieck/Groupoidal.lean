import Mathlib.CategoryTheory.Grothendieck
import Mathlib.CategoryTheory.Category.Grpd
import GroupoidModel.Pointed.IsPullback

import SEq.Tactic.DepRewrite

/-!
# The Groupidal Grothendieck construction

  ‚ÜëGrothendieck (toCat A) -- toPGrpd --> PGrpd
        |                                 |
        |                                 |
‚Üë Grothendieck.forget        PGrpd.forgetToGrpd
        |                                 |
        v                                 v
        ‚ÜëŒì--------------A---------------> Grpd

## Main definitions
* `CategoryTheory.Grothendieck.Groupoidal`
  takes a functor from a groupoid into `Grpd` the category of groupoids,
  composes it with the forgetful functor into `Cat` the category of categories,
  then applies `CategoryTheory.Grothendieck`.
  This is a groupoid.

## Main statements

* `CategoryTheory.Grothendieck.Groupoidal.groupoid`
  is an instance of a groupoid structure on the groupidal
  Grothendieck construction.
* `CategoryTheory.Grothendieck.Groupoidal.isPullback`
  shows that `Grothendieck.forget A` is classified by `PGrpd.forgetToGrpd`
  as the pullback of `A`.
  This uses the proof of the similar fact
  `CategoryTheory.Grothendieck.isPullback`,
  as well as the proof `CategoryTheory.isPullback_forgetToGrpd_forgetToCat`
  that `PGrpd` is the pullback of `PCat`.

- TODO Probably the proof of `Groupoidal.IsPullback` can be shortened
  significantly by providing a direct proof of pullback
  using the `IsMegaPullback` defintions
- NOTE Design: `Groupoidal.Œπ`, `Groupoidal.pre` and so on should *not* be
  reduced by `simp`. Instead we should add `simp` lemmas by hand.
  This avoids `Grpd.forgetToCat` cluttering the user's context
-/

universe v u v‚ÇÅ u‚ÇÅ v‚ÇÇ u‚ÇÇ v‚ÇÉ u‚ÇÉ

namespace CategoryTheory

namespace Grothendieck

/--
  In Mathlib.CategoryTheory.Grothendieck we find the Grothendieck construction
  for the functors `F : C ‚•§ Cat`. Given a functor `F : G ‚•§ Grpd`, we show that
  the Grothendieck construction of the composite `F ‚ãô Grpd.forgetToCat`, where
  `forgetToCat : Grpd ‚•§ Cat` is the embedding of groupoids into categories, is a groupoid.
-/
def Groupoidal {C : Type u‚ÇÅ} [Category.{v‚ÇÅ,u‚ÇÅ} C] (F : C ‚•§ Grpd.{v‚ÇÇ,u‚ÇÇ}) :=
  Grothendieck (F ‚ãô Grpd.forgetToCat)

notation:max "‚à´(" A ")" => Grothendieck.Groupoidal A

namespace Groupoidal

section

variable {C : Type u‚ÇÅ} [Category.{v‚ÇÅ,u‚ÇÅ} C] {F : C ‚•§ Grpd.{v‚ÇÇ,u‚ÇÇ}}

instance : Category (Groupoidal F) :=
  inferInstanceAs (Category (Grothendieck _))

def forget : ‚à´(F) ‚•§ C := Grothendieck.forget _

/--
  We should use this to introduce objects,
  rather than the API for `Grothendieck`.
  This might seem redundant, but it simplifies the goal when
  making a point so that it does not show the composition with `Grpd.forgetToCat`
-/
def objMk (c : C) (x : F.obj c) : ‚à´(F) where
  base := c
  fiber := x

-- FIXME should this be done by adding @[simps] to objMk?
@[simp] theorem objMk_base (c : C) (x : F.obj c) : (objMk c x).base = c :=
  rfl

-- FIXME should this be done by adding @[simps] to objMk?
@[simp] theorem objMk_fiber (c : C) (x : F.obj c) : (objMk c x).fiber = x :=
  rfl

/--
  We should use this to introduce morphisms,
  rather than the API for `Grothendieck`.
  This might seem redundant, but it simplifies the goal when
  making a path in the fiber so that it does not show the
  composition with `Grpd.forgetToCat`
-/
def homMk {X Y : ‚à´(F)} (fb : X.base ‚ü∂ Y.base) (ff : (F.map fb).obj X.fiber ‚ü∂ Y.fiber)
    : X ‚ü∂ Y where
  base := fb
  fiber := ff

-- FIXME should this be done by adding @[simps] to homMk?
@[simp] theorem homMk_base {X Y : ‚à´(F)} (fb : X.base ‚ü∂ Y.base)
    (ff : (F.map fb).obj X.fiber ‚ü∂ Y.fiber) : (homMk fb ff).base = fb :=
  rfl

-- FIXME should this be done by adding @[simps] to homMk?
@[simp] theorem homMk_fiber {X Y : ‚à´(F)} (fb : X.base ‚ü∂ Y.base)
    (ff : (F.map fb).obj X.fiber ‚ü∂ Y.fiber) : (homMk fb ff).fiber = ff :=
  rfl

end

section


variable {C : Type u‚ÇÅ} [Groupoid.{v‚ÇÅ,u‚ÇÅ} C] {F : C ‚•§ Grpd.{v‚ÇÇ,u‚ÇÇ}}

instance
    (X : C) : Groupoid (F ‚ãô Grpd.forgetToCat |>.obj X) where
  inv f := ((F.obj X).str').inv f

/--
If `F : C ‚•§ Grpd` is a functor and `t : c ‚ü∂ d` is a morphism in `C`, then `transport` maps each
`c`-based element of `‚à´(F)` to a `d`-based element.
-/
def transport (x : ‚à´(F)) {c : C} (t : x.base ‚ü∂ c) : ‚à´(F) :=
  Grothendieck.transport x t

@[simp] theorem transport_base (x : ‚à´(F)) {c : C} (t : x.base ‚ü∂ c) :
    (x.transport t).base = c :=
  Grothendieck.transport_base x t

@[simp] theorem transport_fiber (x : ‚à´(F)) {c : C} (t : x.base ‚ü∂ c) :
    (x.transport t).fiber = (F.map t).obj x.fiber :=
  Grothendieck.transport_fiber x t

/--
If `F : C ‚•§ Cat` is a functor and `t : c ‚ü∂ d` is a morphism in `C`, then `transport` maps each
`c`-based element `x` of `Grothendieck F` to a `d`-based element `x.transport t`.

`toTransport` is the morphism `x ‚ü∂ x.transport t` induced by `t` and the identity on fibers.
-/
def toTransport (x : ‚à´(F)) {c : C} (t : x.base ‚ü∂ c) : x ‚ü∂ x.transport t :=
  Grothendieck.toTransport x t

@[simp] theorem toTransport_base (x : ‚à´(F)) {c : C} (t : x.base ‚ü∂ c) :
    (x.toTransport t).base = t :=
  Grothendieck.toTransport_base _ _

@[simp] theorem toTransport_fiber (x : ‚à´(F)) {c : C} (t : x.base ‚ü∂ c) :
    (x.toTransport t).fiber = ùüô ((F.map t).obj x.fiber) :=
  Grothendieck.toTransport_fiber _ _


def isoMk {X Y : ‚à´(F)} (f : X ‚ü∂ Y) : X ‚âÖ Y := by
  fapply Grothendieck.mkIso
  ¬∑ exact (Groupoid.isoEquivHom _ _).2 f.base
  ¬∑ apply (Groupoid.isoEquivHom _ _).2 f.fiber

def inv {X Y : ‚à´(F)} (f : X ‚ü∂ Y) : Y ‚ü∂ X  :=
  isoMk f |>.inv

instance groupoid : Groupoid ‚à´(F) where
  inv f :=  inv f
  inv_comp f := (isoMk f).inv_hom_id
  comp_inv f := (isoMk f).hom_inv_id

end

section FunctorFrom

variable {C : Type u} [Category.{v} C]
    (F : C ‚•§ Grpd.{v‚ÇÅ,u‚ÇÅ})

/-- The inclusion of a fiber `F.obj c` of a functor `F : C ‚•§ Cat` into its
groupoidal Grothendieck construction.-/
def Œπ (c : C) : F.obj c ‚•§ Groupoidal F :=
  Grothendieck.Œπ (F ‚ãô Grpd.forgetToCat) c

theorem Œπ_obj (c : C) (d : ‚Üë(F.obj c)) :
    (Œπ F c).obj d = { base := c, fiber := d } :=
  Grothendieck.Œπ_obj _ _ _

-- NOTE when `f = eqToHom` this is not the rewrite I want.
-- Instead I want to do `eqToHom_map`
theorem Œπ_map (c : C) {X Y : ‚Üë(F.obj c)} (f : X ‚ü∂ Y) :
    (Œπ F c).map f = ‚ü®ùüô _, eqToHom (by simp [Œπ_obj, Grpd.forgetToCat]) ‚â´ f‚ü© :=
  Grothendieck.Œπ_map _ _ _

variable {F}

@[ext (iff := false)]
theorem ext {X Y : ‚à´(F)} (f g : Hom X Y) (w_base : f.base = g.base)
    (w_fiber : eqToHom (by rw [w_base]) ‚â´ f.fiber = g.fiber) : f = g :=
  Grothendieck.ext f g w_base w_fiber

/-- Every morphism `f : X ‚ü∂ Y` in the base category induces a natural transformation from the fiber
inclusion `Œπ F X` to the composition `F.map f ‚ãô Œπ F Y`. -/
def ŒπNatTrans {X Y : C} (f : X ‚ü∂ Y) : Œπ F X ‚ü∂ F.map f ‚ãô Œπ F Y :=
  Grothendieck.ŒπNatTrans _

@[simp] theorem ŒπNatTrans_id_app {X : C} {a : F.obj X} :
    (@ŒπNatTrans _ _ F _ _ (ùüô X)).app a =
    eqToHom (by simp) := Grothendieck.ŒπNatTrans_id_app

@[simp] theorem ŒπNatTrans_comp_app {X Y Z : C} {f : X ‚ü∂ Y} {g : Y ‚ü∂ Z} {a} :
    (@ŒπNatTrans _ _ F _ _ (f ‚â´ g)).app a =
    (@ŒπNatTrans _ _ F _ _ f).app a ‚â´
    (@ŒπNatTrans _ _ F _ _ g).app ((F.map f).obj a) ‚â´ eqToHom (by simp) := Grothendieck.ŒπNatTrans_comp_app

@[simp] theorem ŒπNatTrans_app_base {X Y : C} (f : X ‚ü∂ Y) (d : ‚Üë(F.obj X)) :
    ((ŒπNatTrans f).app d).base = f :=
  Grothendieck.ŒπNatTrans_app_base _ _

@[simp] theorem ŒπNatTrans_app_fiber {X Y : C} (f : X ‚ü∂ Y) (d : F.obj X) :
    ((ŒπNatTrans f).app d).fiber
    = ùüô ((F.map f).obj ((Groupoidal.Œπ F X).obj d).fiber) :=
  Grothendieck.ŒπNatTrans_app_fiber _ _

variable {E : Type*} [Category E]
variable (fib : ‚àÄ c, F.obj c ‚•§ E) (hom : ‚àÄ {c c' : C} (f : c ‚ü∂ c'), fib c ‚ü∂ F.map f ‚ãô fib c')
variable (hom_id : ‚àÄ c, hom (ùüô c) = eqToHom (by simp only [Functor.map_id]; rfl))
variable (hom_comp : ‚àÄ c‚ÇÅ c‚ÇÇ c‚ÇÉ (f : c‚ÇÅ ‚ü∂ c‚ÇÇ) (g : c‚ÇÇ ‚ü∂ c‚ÇÉ), hom (f ‚â´ g) =
  hom f ‚â´ whiskerLeft (F.map f) (hom g) ‚â´ eqToHom (by simp only [Functor.map_comp]; rfl))

/-- Construct a functor from `Groupoidal F` to another category `E` by providing a family of
functors on the fibers of `Groupoidal F`, a family of natural transformations on morphisms in the
base of `Groupoidal F` and coherence data for this family of natural transformations. -/
def functorFrom : ‚à´(F) ‚•§ E :=
  Grothendieck.functorFrom fib hom hom_id hom_comp

@[simp] theorem functorFrom_obj (X : ‚à´(F)) : (functorFrom fib hom hom_id hom_comp).obj X = (fib X.base).obj X.fiber := by apply Grothendieck.functorFrom_obj

@[simp] theorem functorFrom_map {X Y : ‚à´(F)} (f : X ‚ü∂ Y) :
  (functorFrom fib hom hom_id hom_comp).map f
  = (hom f.base).app X.fiber ‚â´ (fib Y.base).map f.fiber := by apply Grothendieck.functorFrom_map

/-- `Groupoidal.Œπ F c` composed with `Groupoidal.functorFrom` is isomorphic a functor on a fiber
on `F` supplied as the first argument to `Groupoidal.functorFrom`. -/
def ŒπCompFunctorFrom (c : C) : Œπ F c ‚ãô (functorFrom fib hom hom_id hom_comp) ‚âÖ fib c :=
  Grothendieck.ŒπCompFunctorFrom _ _ _ _ _

end FunctorFrom

section
variable {C : Type u} [Category.{v} C]
    {F G : C ‚•§ Grpd.{v‚ÇÇ,u‚ÇÇ}}
/-- The groupoidal Grothendieck construction is functorial:
a natural transformation `Œ± : F ‚ü∂ G` induces
a functor `Groupoidal.map : Groupoidal F ‚•§ Groupoidal G`.
-/
def map (Œ± : F ‚ü∂ G) : Groupoidal F ‚•§ Groupoidal G :=
  Grothendieck.map (whiskerRight Œ± _)

@[simp] theorem map_obj {Œ± : F ‚ü∂ G} (X : Groupoidal F) :
    (Groupoidal.map Œ±).obj X = ‚ü®X.base, (Œ±.app X.base).obj X.fiber‚ü© := rfl

-- TODO move to ForMathlib
theorem Grothendieck.map_eqToHom_obj_base {F G : C ‚•§ Cat.{v,u}} (h : F = G)
  (x) : ((Grothendieck.map (eqToHom h)).obj x).base = x.base := rfl

theorem map_id_eq : map (ùüô F) = Functor.id (Cat.of <| Groupoidal <| F) :=
  Grothendieck.map_id_eq

end

section

variable {C : Type u} [Category.{v} C] {D : Type u‚ÇÅ} [Category.{v‚ÇÅ} D]
    (F : C ‚•§ Grpd.{v‚ÇÇ,u‚ÇÇ})

/-- Applying a functor `G : D ‚•§ C` to the base of the groupoidal Grothendieck
  construction induces a functor `‚à´(G ‚ãô F) ‚•§ ‚à´(F)`. -/
def pre (G : D ‚•§ C) : ‚à´(G ‚ãô F) ‚•§ ‚à´(F) :=
  Grothendieck.pre (F ‚ãô Grpd.forgetToCat) G

@[simp]
theorem pre_id : pre F (Functor.id C) = Functor.id _ := rfl

/--
An natural isomorphism between functors `G ‚âÖ H` induces a natural isomorphism between the canonical
morphism `pre F G` and `pre F H`, up to composition with
`‚à´(G ‚ãô F) ‚•§ ‚à´(H ‚ãô F)`.
-/
def preNatIso {G H : D ‚•§ C} (Œ± : G ‚âÖ H) :
    pre F G ‚âÖ map (whiskerRight Œ±.hom F) ‚ãô (pre F H) :=
  Grothendieck.preNatIso _ _

/--
Given an equivalence of categories `G`, `preInv _ G` is the (weak) inverse of the `pre _ G.functor`.
-/
def preInv (G : D ‚âå C) : ‚à´(F) ‚•§ ‚à´(G.functor ‚ãô F) :=
  map (whiskerRight G.counitInv F) ‚ãô pre (G.functor ‚ãô F) G.inverse

variable {F} in
lemma pre_comp_map (G: D ‚•§ C) {H : C ‚•§ Grpd} (Œ± : F ‚ü∂ H) :
    pre F G ‚ãô map Œ± = map (whiskerLeft G Œ±) ‚ãô pre H G := rfl

variable {F} in
lemma pre_comp_map_assoc (G: D ‚•§ C) {H : C ‚•§ Grpd} (Œ± : F ‚ü∂ H) {E : Type*} [Category E]
    (K : ‚à´(H) ‚•§ E) : pre F G ‚ãô map Œ± ‚ãô K= map (whiskerLeft G Œ±) ‚ãô pre H G ‚ãô K := rfl

variable {E : Type*} [Category E] in
@[simp]
lemma pre_comp (G : D ‚•§ C) (H : E ‚•§ D) : pre F (H ‚ãô G) = pre (G ‚ãô F) H ‚ãô pre F G := rfl

end

section

variable {Œì : Type u} [Category.{v} Œì] (A : Œì ‚•§ Grpd.{v‚ÇÅ, u‚ÇÅ})
instance toPCatObjGroupoid (x : ‚à´(A)) : Groupoid x.toPCatObj := by
  dsimp [Grpd.forgetToCat]
  infer_instance

instance toPCatObjPointed (x : ‚à´(A)) : PointedGroupoid x.toPCatObj :=
  PointedGroupoid.of x.toPCatObj PointedCategory.pt

def toPGrpd : ‚à´(A) ‚•§ PGrpd.{v‚ÇÅ,u‚ÇÅ} where
  obj x := PGrpd.of x.toPCatObj
  map := Grothendieck.toPCatMap
  map_id := (Grothendieck.toPCat (A ‚ãô Grpd.forgetToCat)).map_id
  map_comp := (Grothendieck.toPCat (A ‚ãô Grpd.forgetToCat)).map_comp

theorem toPGrpd_comp_forgetToPCat :
    toPGrpd A ‚ãô PGrpd.forgetToPCat = toPCat (A ‚ãô Grpd.forgetToCat) :=
  rfl

section

variable {F : Œì ‚•§ Grpd.{v‚ÇÅ,u‚ÇÅ}}

/-- This proves that base of an eqToHom morphism in the category Grothendieck A is an eqToHom morphism -/
@[simp] theorem eqToHom_base {x y : ‚à´(F)} (eq : x = y) :
    (eqToHom eq).base = eqToHom (by simp [eq]) :=
  Grothendieck.eqToHom_base _

/-- This is the proof of equality used in the eqToHom in `Groupoidal.eqToHom_fiber` -/
theorem eqToHom_fiber_aux {g1 g2 : ‚à´(F)}
    (eq : g1 = g2) : (F.map (eqToHom eq).base).obj g1.fiber = g2.fiber := by
  unfold Groupoidal
  cases eq
  simp

/-- This proves that fiber of an eqToHom morphism in the category Grothendieck A is an eqToHom morphism -/
@[simp] theorem eqToHom_fiber {g1 g2 : ‚à´(F)} (eq : g1 = g2) :
    (eqToHom eq).fiber = eqToHom (eqToHom_fiber_aux eq) := by
  unfold Groupoidal
  cases eq
  simp

@[simp] theorem base_eqToHom {X Y : ‚à´(F)} (h : X = Y) :
    (eqToHom h).base = eqToHom (congrArg base h) :=
  Grothendieck.base_eqToHom _

@[simp]
theorem id_base (X : ‚à´(F)) :
    Hom.base (ùüô X) = ùüô X.base := by
  rfl

@[simp]
theorem id_fiber (X : ‚à´(F)) :
    Hom.fiber (ùüô X) = eqToHom (by simp [Grpd.forgetToCat]) :=
  rfl

@[simp]
theorem comp_base {X Y Z : ‚à´(F)} (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z) :
    (f ‚â´ g).base = f.base ‚â´ g.base :=
  rfl

@[simp]
theorem comp_fiber {X Y Z : ‚à´(F)} (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z) :
    Hom.fiber (f ‚â´ g) =
      eqToHom (by simp [Grpd.forgetToCat]) ‚â´ (F.map g.base).map f.fiber ‚â´ g.fiber :=
  rfl


@[simp] theorem _root_.CategoryTheory.Grpd.eqToHom_app {C : Type u‚ÇÅ} [Category.{v‚ÇÅ} C]
    {D : Type u‚ÇÇ} [Category.{v‚ÇÇ} D] (F G : C ‚•§ D) (h : F = G) (X : C) :
    (eqToHom h).app X = eqToHom (by subst h; rfl) := by
  subst h
  simp

section
variable {C : Type u} [Category.{v, u} C] {D : Type u‚ÇÅ}
  [Category.{v‚ÇÅ, u‚ÇÅ} D] (F : C ‚•§ Grpd) (G : D ‚•§ C)
  (X : Groupoidal (G ‚ãô F))

@[simp] theorem pre_obj_base : ((pre F G).obj X).base = G.obj X.base :=
  Grothendieck.pre_obj_base _ _ _

@[simp] theorem pre_obj_fiber : ((pre F G).obj X).fiber = X.fiber :=
  Grothendieck.pre_obj_fiber _ _ _

variable {X Y : Groupoidal (G ‚ãô F)} (f : X ‚ü∂ Y)

@[simp] theorem pre_map_base : ((pre F G).map f).base = G.map f.base :=
  Grothendieck.pre_map_base _ _ _

@[simp] theorem pre_map_fiber : ((pre F G).map f).fiber = f.fiber :=
  Grothendieck.pre_map_fiber _ _ _

end
section

variable {G : Œì ‚•§ Grpd}

-- theorem eta (p : ‚à´(F)) : ‚ü®p.base, p.fiber‚ü© = p := rfl

theorem obj_ext_hEq {p1 p2 : ‚à´(F)} (hbase : p1.base = p2.base)
    (hfib : HEq p1.fiber p2.fiber) : p1 = p2 :=
  Grothendieck.obj_ext_hEq hbase hfib


variable (Œ± : F ‚ü∂ G) (X : ‚à´(F))

@[simp] theorem map_obj_base : ((map Œ±).obj X).base = X.base :=
  Grothendieck.map_obj_base _ _

@[simp] theorem map_obj_fiber :
    ((map Œ±).obj X).fiber = (Œ±.app X.base).obj X.fiber :=
  Grothendieck.map_obj_fiber _ _

variable {X} {Y : ‚à´(F)} (f : X ‚ü∂ Y)

@[simp] theorem map_map_base : ((Groupoidal.map Œ±).map f).base = f.base
    := Grothendieck.map_map_base _ _

@[simp] theorem map_map_fiber :
  ((Groupoidal.map Œ±).map f).fiber =
    eqToHom (Functor.congr_obj (map.proof_1 (whiskerRight Œ± _) f) X.fiber)
    ‚â´ (Œ±.app Y.base).map f.fiber := Grothendieck.map_map_fiber _ _

@[simp] theorem fiber_eqToHom (h : X = Y) :
    (eqToHom h).fiber = eqToHom (by unfold Groupoidal; subst h; simp [Grpd.forgetToCat]) :=
  Grothendieck.fiber_eqToHom _

@[simp] theorem eqToHom_comp_fiber {C : Type u} [Category.{v} C] {A : C ‚•§ Grpd.{v‚ÇÅ, u‚ÇÅ}}
    {p q r : ‚à´(A)} (h : p = q) {f : q ‚ü∂ r} :
    (eqToHom h ‚â´ f).fiber = eqToHom (by subst h; simp) ‚â´ f.fiber := by
  simp [eqToHom_map]

end
end


namespace IsMegaPullback

theorem comm_sq : Groupoidal.toPGrpd A ‚ãô PGrpd.forgetToGrpd = Groupoidal.forget ‚ãô A := rfl

variable {A} {C : Type u‚ÇÇ} [Category.{v‚ÇÇ} C]
  (fst : C ‚•§ PGrpd.{v‚ÇÅ, u‚ÇÅ})
  (snd : C ‚•§ Œì)
  (w : fst ‚ãô PGrpd.forgetToGrpd = snd ‚ãô A)

theorem toPGrpd_eq_lift :
    toPGrpd A =
    PGrpd.IsMegaPullback.lift
      (toPCat (A ‚ãô Grpd.forgetToCat))
      (Groupoidal.forget ‚ãô A) rfl :=
  PGrpd.IsMegaPullback.lift_uniq
    (toPCat (A ‚ãô Grpd.forgetToCat))
    (Groupoidal.forget ‚ãô A)
    rfl _ rfl rfl

def lift : C ‚•§ Groupoidal A :=
  Grothendieck.IsMegaPullback.lift
    (fst ‚ãô PGrpd.forgetToPCat) snd (by
      simp only [‚Üê Functor.assoc, ‚Üê w]
      rfl)

theorem fac_left' : (lift fst snd w ‚ãô toPGrpd A) ‚ãô PGrpd.forgetToPCat
    = fst ‚ãô PGrpd.forgetToPCat := by
  rw [toPGrpd_eq_lift, Functor.assoc,
    PGrpd.IsMegaPullback.fac_left,
    ‚Üê PGrpd.IsMegaPullback.fac_left
      (fst ‚ãô PGrpd.forgetToPCat) (snd ‚ãô A) (by rw [‚Üê w]; rfl)]
  rfl

@[simp] theorem fac_left : lift fst snd w ‚ãô Groupoidal.toPGrpd _ = fst :=
   calc lift fst snd w ‚ãô Groupoidal.toPGrpd _
    _ = PGrpd.IsMegaPullback.lift
      (fst ‚ãô PGrpd.forgetToPCat)
      (snd ‚ãô A)
      (by rw [Functor.assoc, PGrpd.IsMegaPullback.comm_sq, ‚Üê w]; rfl) :=
    PGrpd.IsMegaPullback.lift_uniq
      (fst ‚ãô PGrpd.forgetToPCat)
      (snd ‚ãô A) _ _
      (fac_left' _ _ _)
      (by rw [Functor.assoc, comm_sq]; rfl)
    _ = fst :=
    symm $ PGrpd.IsMegaPullback.lift_uniq _ _ _ _ rfl w

@[simp] theorem fac_right :
    lift fst snd w ‚ãô Groupoidal.forget
    = snd :=
  Grothendieck.IsMegaPullback.fac_right
    (fst ‚ãô PGrpd.forgetToPCat) snd (by
    rw [Functor.assoc, PGrpd.IsMegaPullback.comm_sq,
      ‚Üê Functor.assoc, w, Functor.assoc])

theorem lift_uniq (m : C ‚•§ Groupoidal A)
    (hl : m ‚ãô toPGrpd _ = fst)
    (hr : m ‚ãô Groupoidal.forget = snd) :
    m = lift _ _ w := by
  apply Grothendieck.IsMegaPullback.lift_uniq
  ¬∑ rw [‚Üê toPGrpd_comp_forgetToPCat, ‚Üê hl, Functor.assoc]
  ¬∑ exact hr

theorem hom_ext {m n : C ‚•§ Groupoidal A}
    (hl : m ‚ãô toPGrpd _ = n ‚ãô toPGrpd _)
    (hr : m ‚ãô Groupoidal.forget = n ‚ãô Groupoidal.forget) :
    m = n := by
  rw [lift_uniq (m ‚ãô toPGrpd _) (m ‚ãô forget) rfl m rfl rfl,
    lift_uniq (n ‚ãô toPGrpd _) (n ‚ãô forget) rfl n rfl rfl]
  rw! [hl, hr]

end IsMegaPullback

namespace IsPullback

open Grothendieck.IsPullback ULift

variable {Œì : Type u} [Category.{u} Œì] (A : Œì ‚•§ Grpd.{u,u})

abbrev uLiftGrpd : Cat.{u, max u (u+1)} :=
  Cat.ofULift.{max u (u+1)} Grpd.{u}

abbrev uLiftA : Cat.ofULift.{u+1} Œì ‚ü∂ uLiftGrpd.{u} :=
  downFunctor ‚ãô A ‚ãô upFunctor

abbrev uLiftPGrpd : Cat.{u, max u (u+1)} :=
  Cat.ofULift.{max u (u+1)} PGrpd.{u,u}

abbrev uLiftPGrpdForgetToGrpd : uLiftPGrpd.{u} ‚ü∂ uLiftGrpd.{u} :=
  downFunctor ‚ãô PGrpd.forgetToGrpd ‚ãô upFunctor

/--
The universal lift
`var' : ‚à´(A) ‚ü∂ Grothendieck(Grpd.forgetToCat)`
given by pullback pasting in the following pasting diagram.

      ‚à´(A)  .-.-.-.-.-.-.-> ‚ÜëGrothendieckForgetToCat -----> ‚ÜëPCat.{u,u}
        |                          |                                  |
        |                          |                                  |
‚Üë Grothendieck.forget        ‚ÜëGrothendieck.forget         ‚ÜëPCat.forgetToCat
        |                          |                                  |
        v                          v                                  v
        ‚ÜëŒì----------------------> ‚ÜëGrpd.{u,u} ----------------> ‚ÜëCat.{u,u}
-/
noncomputable def var' :
    IsPullback.uLiftGrothendieck (A ‚ãô Grpd.forgetToCat)
    ‚ü∂ IsPullback.uLiftGrothendieck Grpd.forgetToCat.{u,u} :=
  (Grothendieck.isPullback (Grpd.forgetToCat.{u,u})).lift
    (IsPullback.uLiftToPCat (A ‚ãô Grpd.forgetToCat))
    ((IsPullback.uLiftGrothendieckForget
      (A ‚ãô Grpd.forgetToCat)) ‚â´ uLiftA A)
      (Grothendieck.isPullback
        (A ‚ãô Grpd.forgetToCat)).cone.condition_one

theorem var'_uLiftToPCat :
    var' A ‚â´ (uLiftToPCat (Grpd.forgetToCat.{u,u}))
    = uLiftToPCat (A ‚ãô Grpd.forgetToCat) :=
  (Grothendieck.isPullback (Grpd.forgetToCat.{u,u})).lift_fst
    (IsPullback.uLiftToPCat (A ‚ãô Grpd.forgetToCat))
    ((IsPullback.uLiftGrothendieckForget (A ‚ãô Grpd.forgetToCat)) ‚â´ uLiftA A)
    (Grothendieck.isPullback (A ‚ãô Grpd.forgetToCat)).cone.condition_one

theorem var'_forget :
    var' A ‚â´ (uLiftGrothendieckForget (Grpd.forgetToCat.{u,u}))
    = uLiftGrothendieckForget (A ‚ãô Grpd.forgetToCat) ‚â´ uLiftA A :=
  (Grothendieck.isPullback (Grpd.forgetToCat.{u,u})).lift_snd
    (IsPullback.uLiftToPCat (A ‚ãô Grpd.forgetToCat)) ((IsPullback.uLiftGrothendieckForget (A ‚ãô Grpd.forgetToCat)) ‚â´ uLiftA A)
    (Grothendieck.isPullback (A ‚ãô Grpd.forgetToCat)).cone.condition_one


/--
The following square is a pullback
  ‚ÜëGrothendieck (Groupoid.compForgetToCat A) ------- var' -------> ‚ÜëGrothendieck Grpd.forgetToCat
        |                                                    |
        |                                                    |
‚Üë Grothendieck.forget                           ‚ÜëGrothendieck.forget
        |                                                    |
        v                                                    v
        ‚ÜëŒì--------------‚ÜëA----------------------------> ‚ÜëGrpd.{u,u}

by pullback pasting

  ‚ÜëGrothendieck (Groupoid.compForgetToCat A) --> ‚ÜëGrothendieck Grpd.forgetToCat ---> ‚ÜëPCat.{u,u}
        |                          |                                  |
        |                          |                                  |
‚Üë Grothendieck.forget        ‚ÜëGrothendieck.forget         ‚ÜëPCat.forgetToCat
        |                          |                                  |
        v                          v                                  v
        ‚ÜëŒì----------------------> ‚ÜëGrpd.{u,u} ----------------> ‚ÜëCat.{u,u}
-/
theorem
  isPullback_uLiftGrothendieckForget_Groupoid.compForgetToCat_uLiftGrothendieckForget_grpdForgetToCat :
    IsPullback
    (Cat.homOf (var' A))
    (IsPullback.uLiftGrothendieckForget (A ‚ãô Grpd.forgetToCat))
    (IsPullback.uLiftGrothendieckForget (Grpd.forgetToCat.{u,u}))
    (uLiftA A) :=
  IsPullback.of_right'
    (Grothendieck.isPullback (A ‚ãô Grpd.forgetToCat))
    (Grothendieck.isPullback (Grpd.forgetToCat.{u,u}))

theorem isPullback_aux:
    IsPullback
      (Cat.homOf (var' A)
        ‚â´ (Cat.ULift_iso_self ‚â™‚â´ PGrpd.isoGrothendieckForgetToCat.{u,u}.symm).hom)
      (IsPullback.uLiftGrothendieckForget (A ‚ãô Grpd.forgetToCat))
      (Cat.homOf PGrpd.forgetToGrpd.{u,u})
      (uLiftA A ‚â´ Cat.ULift_iso_self.hom) :=
  IsPullback.paste_horiz
    (isPullback_uLiftGrothendieckForget_Groupoid.compForgetToCat_uLiftGrothendieckForget_grpdForgetToCat.{u} A)
    (PGrpd.IsPullback.isPullback_uLiftGrothendieckForget_forgetToGrpd.{u})

open ULift

variable {Œì : Type u} [Category.{u} Œì] (A : Œì ‚•§ Grpd.{u,u})

theorem toPGrpd_comp_forgetToPCat_eq_var'_comp_isoGrothendieckForgetToCatInv_comp_forgetToPCat :
    downFunctor ‚ãô toPGrpd A ‚ãô PGrpd.forgetToPCat
      = var' A ‚ãô downFunctor ‚ãô PGrpd.isoGrothendieckForgetToCatInv ‚ãô PGrpd.forgetToPCat := by
  have h : var' A ‚ãô (IsPullback.uLiftToPCat (Grpd.forgetToCat.{u,u}))
    = IsPullback.uLiftToPCat (A ‚ãô Grpd.forgetToCat) := var'_uLiftToPCat A
  dsimp only [IsPullback.uLiftToPCat] at h
  simp only [Cat.ofULift, Cat.of_Œ±, ‚Üê Functor.assoc,
    ‚Üê toPGrpd_comp_forgetToPCat, comp_upFunctor_inj] at h
  simp only [Functor.assoc] at h
  rw [‚Üê h]
  rfl

theorem toPGrpd_comp_forgetToGrpd_eq_var'_comp_isoGrothendieckForgetToCatInv_comp_forgetToGrpd :
    downFunctor ‚ãô toPGrpd A ‚ãô PGrpd.forgetToGrpd
      = var' A ‚ãô downFunctor ‚ãô PGrpd.isoGrothendieckForgetToCatInv ‚ãô PGrpd.forgetToGrpd := by
  have h : (downFunctor ‚ãô PGrpd.isoGrothendieckForgetToCatInv.{u,u})
      ‚ãô PGrpd.forgetToGrpd.{u,u} =
      IsPullback.uLiftGrothendieckForget Grpd.forgetToCat.{u,u} ‚ãô downFunctor :=
    PGrpd.IsPullback.isPullback_forgetToGrpd_uLiftGrothendieckForget_commSq.horiz_inv.{u,u}.w
  simp only [‚Üê toPGrpd_comp_forgetToPCat, Functor.assoc] at h
  have h1 : var' A ‚ãô IsPullback.uLiftGrothendieckForget Grpd.forgetToCat.{u}
      = IsPullback.uLiftGrothendieckForget (A ‚ãô Grpd.forgetToCat) ‚ãô uLiftA A :=
    var'_forget A
  simp only [Cat.of_Œ±, IsPullback.uLiftGrothendieckForget, ‚Üê Functor.assoc,
    uLiftA] at h1
  rw [comp_upFunctor_inj] at h1
  simp only [h, ‚Üê Functor.assoc, h1]
  rfl

theorem toPGrpd_eq_var'_comp_isoGrothendieckForgetToCatInv' :
    Cat.homOf (downFunctor ‚ãô toPGrpd A)
      = Cat.homOf (var' A ‚ãô downFunctor ‚ãô PGrpd.isoGrothendieckForgetToCatInv)
      :=
  PGrpd.isPullback_forgetToGrpd_forgetToCat.{u}.hom_ext
    (toPGrpd_comp_forgetToPCat_eq_var'_comp_isoGrothendieckForgetToCatInv_comp_forgetToPCat _)
    (toPGrpd_comp_forgetToGrpd_eq_var'_comp_isoGrothendieckForgetToCatInv_comp_forgetToGrpd _)

theorem toPGrpd_eq_var'_comp_isoGrothendieckForgetToCatInv :
    downFunctor ‚ãô toPGrpd A
      = var' A ‚ãô downFunctor ‚ãô PGrpd.isoGrothendieckForgetToCatInv :=
  toPGrpd_eq_var'_comp_isoGrothendieckForgetToCatInv' _

end IsPullback

open Grothendieck
open IsPullback

/-
The following square is a pullback

       ‚à´(A)               -- toPGrpd -->                    PGrpd
        |                                                     |
        |                                                     |
‚Üë Grothendieck.forget                                PGrpd.forgetToGrpd
        |                                                     |
        |                                                     |
        v                                                     v
        ‚ÜëŒì-----------------------A-----------------------> Grpd
in the appropriately sized category `Grpd.{v, max u (v+1)}`;
where `(Œì : Type u) [Grpdegory.{v} Œì] (A : Œì ‚•§ Grpd.{v,v})`.
-/
theorem isPullback {Œì : Type u} [Category.{u} Œì] (A : Œì ‚•§ Grpd.{u,u}) :
    IsPullback
      (Cat.homOf (ULift.downFunctor ‚ãô toPGrpd A))
      (IsPullback.uLiftGrothendieckForget (A ‚ãô Grpd.forgetToCat))
      (Cat.homOf PGrpd.forgetToGrpd.{u,u})
      (Cat.homOf (ULift.downFunctor.{u,u} ‚ãô A)) := by
  have h := isPullback_aux.{u} A
  simp at h
  convert h
  apply toPGrpd_eq_var'_comp_isoGrothendieckForgetToCatInv

end

section

variable {Œì : Type u‚ÇÇ} [Category.{v‚ÇÇ} Œì] {Œî : Type u‚ÇÉ} [Category.{v‚ÇÉ} Œî]
    (œÉ : Œî ‚•§ Œì)

@[simp] theorem ŒπCompPre (A : Œì ‚•§ Grpd.{v‚ÇÅ,u‚ÇÅ}) (x : Œî)
    : Œπ (œÉ ‚ãô A) x ‚ãô Groupoidal.pre A œÉ = Œπ A (œÉ.obj x) :=
  Grothendieck.ŒπCompPre _ (A ‚ãô Grpd.forgetToCat) _

end

section

variable {Œì : Type u} [Category.{v} Œì]
variable (A : Œì ‚•§ Grpd.{v‚ÇÅ,u‚ÇÅ}) (Œ± : Œì ‚•§ PGrpd.{v‚ÇÅ,u‚ÇÅ}) (h : Œ± ‚ãô PGrpd.forgetToGrpd = A)

/-- `sec` is the universal lift in the following diagram,
  which is a section of `Groupoidal.forget`
             Œ±
  ===== Œì -------Œ±--------------¬¨
 ‚Äñ      ‚Üì sec                   V
 ‚Äñ   M.ext A ‚ãØ -------------> PGrpd
 ‚Äñ      |                        |
 ‚Äñ      |                        |
 ‚Äñ   forget                  forgetToGrpd
 ‚Äñ      |                        |
 ‚Äñ      V                        V
  ===== Œì --Œ± ‚â´ forgetToGrpd--> Grpd
-/
def sec : Œì ‚•§ ‚à´(A) :=
  IsMegaPullback.lift Œ± (ùü≠ _) (by simp [h, Functor.id_comp])

@[simp] def sec_toPGrpd : sec A Œ± h ‚ãô toPGrpd _ = Œ± := by
  simp [sec]

@[simp] def sec_forget : sec A Œ± h ‚ãô forget = ùü≠ _ :=
  rfl

section naturality
variable {Œî : Type u‚ÇÉ} [Category.{v‚ÇÉ} Œî] (œÉ : Œî ‚•§ Œì)

@[simp]
theorem pre_toPGrpd (A : Œì ‚•§ Grpd) : pre A œÉ ‚ãô toPGrpd _ = toPGrpd _ := by
  rfl

theorem pre_forget (A : Œì ‚•§ Grpd) : pre A œÉ ‚ãô forget = forget ‚ãô œÉ := by
  rfl

theorem sec_naturality : œÉ ‚ãô sec A Œ± h = sec (œÉ ‚ãô A) (œÉ ‚ãô Œ±) (by rw [‚Üê h]; rfl) ‚ãô pre A œÉ := by
  apply Groupoidal.IsMegaPullback.hom_ext
  . simp [Functor.assoc, Functor.comp_id]
  . conv_rhs => rw [Functor.assoc, pre_forget, ‚Üê Functor.assoc, sec_forget]
    simp [Functor.assoc, Functor.comp_id, Functor.id_comp]

end naturality

@[simp] lemma sec_map_base {x y} {f : x ‚ü∂ y} :
    ((sec A Œ± h).map f).base = f := by
  simp [sec, IsMegaPullback.lift, Grothendieck.IsMegaPullback.lift]

-- TODO likely will also need the non-trivially forded case, in which case rename this
-- to `sec_map_fiber_rfl`
@[simp] lemma sec_map_fiber {x y} {f : x ‚ü∂ y} :
    ((sec (Œ± ‚ãô PGrpd.forgetToGrpd) Œ± rfl).map f).fiber = (Œ±.map f).point := by
  simp [sec, IsMegaPullback.lift, Grothendieck.IsMegaPullback.lift,
    Grothendieck.IsMegaPullback.lift_map, Grothendieck.IsMegaPullback.point]

end

theorem congr {C : Type u} [Category.{v, u} C] {F : C ‚•§ Grpd}
    {X Y : Groupoidal F} {f g : X ‚ü∂ Y} (h : f = g) :
    f.fiber = eqToHom (by subst h; rfl) ‚â´ g.fiber := by
  subst h
  dsimp
  simp

section
variable {Œì : Type u} [Groupoid.{v} Œì] (A : Œì ‚•§ Grpd.{v‚ÇÅ,u‚ÇÅ})

/-- Every morphism `f : X ‚ü∂ Y` in the base category induces a natural transformation from the fiber
inclusion `Œπ F X` to the composition `F.map f ‚ãô Œπ F Y`. -/
def ŒπNatIso {X Y : Œì} (f : X ‚ü∂ Y) : Œπ A X ‚âÖ A.map f ‚ãô Œπ A Y where
  hom := (ŒπNatTrans f)
  inv := whiskerLeft (A.map f) (ŒπNatTrans (Groupoid.inv f)) ‚â´ eqToHom (by
    convert_to A.map (f ‚â´ Groupoid.inv f) ‚ãô Œπ A X = Œπ A X
    ¬∑ simp only [Functor.map_comp, Grpd.comp_eq_comp, Functor.assoc]
    ¬∑ simp [Functor.id_comp])
  hom_inv_id := by
   ext a
   apply Grothendieck.Groupoidal.ext
   ¬∑ simp only [NatTrans.id_app, NatTrans.comp_app]
     rw! [Grpd.eqToHom_app]
     simp [Grpd.forgetToCat]
   ¬∑ simp
  inv_hom_id := by
    ext a
    apply Grothendieck.Groupoidal.ext
    ¬∑ simp only [NatTrans.id_app, NatTrans.comp_app]
      rw! [eqToHom_app]
      simp [eqToHom_map, Grpd.forgetToCat]
    ¬∑ simp

theorem ŒπNatIso_hom {x y : Œì} (f : x ‚ü∂ y) :
    (ŒπNatIso A f).hom = ŒπNatTrans f := by
  simp [ŒπNatIso]

@[simp] theorem ŒπNatIso_id (x : Œì) :
    ŒπNatIso A (ùüô x) = eqToIso (by simp [Functor.id_comp]) := by
  ext
  simp [ŒπNatIso]

theorem ŒπNatIso_comp {x y z : Œì} (f : x ‚ü∂ y) (g : y ‚ü∂ z) :
    ŒπNatIso A (f ‚â´ g) = ŒπNatIso A f ‚â™‚â´ isoWhiskerLeft (A.map f) (ŒπNatIso A g)
    ‚â™‚â´ eqToIso (by simp [Functor.assoc]) := by
  ext
  simp [ŒπNatIso]

end

section
variable {C : Type u} [Category.{v} C] {D : Type u‚ÇÅ} [Category.{v‚ÇÅ} D]
    (F : C ‚•§ Grpd.{v‚ÇÇ,u‚ÇÇ})

theorem map_comp_eq {G H : C ‚•§ Grpd.{v‚ÇÇ,u‚ÇÇ}} (Œ± : F ‚ü∂ G) (Œ≤ : G ‚ü∂ H) :
    map (Œ± ‚â´ Œ≤) = map Œ± ‚ãô map Œ≤ := by
  simp [map, Grothendieck.map_comp_eq]

theorem preNatIso_congr {G H : D ‚•§ C} {Œ± Œ≤ : G ‚âÖ H} (h : Œ± = Œ≤) :
    preNatIso F Œ± = preNatIso F Œ≤ ‚â™‚â´ eqToIso (by subst h; simp) :=
  Grothendieck.preNatIso_congr _ h

@[simp] theorem preNatIso_eqToIso {G H : D ‚•§ C} {h : G = H} :
    preNatIso F (eqToIso h) = eqToIso (by
      subst h
      simp [Groupoidal.map_id_eq, Functor.id_comp]) :=
  Grothendieck.preNatIso_eqToIso _

theorem preNatIso_comp {G1 G2 G3 : D ‚•§ C} (Œ± : G1 ‚âÖ G2) (Œ≤ : G2 ‚âÖ G3) :
    preNatIso F (Œ± ‚â™‚â´ Œ≤) = preNatIso F Œ± ‚â™‚â´ isoWhiskerLeft _ (preNatIso F Œ≤) ‚â™‚â´
    eqToIso (by simp [map_comp_eq, Functor.assoc]) :=
  Grothendieck.preNatIso_comp _ _ _

end

end Groupoidal
end Grothendieck
end CategoryTheory
