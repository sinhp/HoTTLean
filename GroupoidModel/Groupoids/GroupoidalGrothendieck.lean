import Mathlib.CategoryTheory.Grothendieck
import Mathlib.CategoryTheory.Category.Grpd

/-!
Here we define the Grothendieck construction for groupoids
-/

universe u v u‚ÇÅ v‚ÇÅ u‚ÇÇ v‚ÇÇ

namespace CategoryTheory

noncomputable section

@[simps!]
def toCat {C : Type u‚ÇÅ} [Category.{v‚ÇÅ,u‚ÇÅ} C] (G : C ‚•§ Grpd) : C ‚•§ Cat := G ‚ãô Grpd.forgetToCat
namespace Grothendieck

open CategoryTheory Iso

variable {C : Type u‚ÇÅ} [Category.{v‚ÇÅ,u‚ÇÅ} C] {G : C ‚•§ Cat.{v‚ÇÇ,u‚ÇÇ}}

/-- A morphism in the Grothendieck construction is an isomorphism if
- the morphism in the base is an isomorphism; and
- the fiber morphism is an isomorphism. -/
def mkIso {X Y : Grothendieck G}
    (s : X.base ‚âÖ Y.base) (t : (G |>.map s.hom).obj X.fiber ‚âÖ Y.fiber) : X ‚âÖ Y where
  hom := { base := s.hom, fiber := t.hom }
  inv.base := s.inv
  inv.fiber := (G.map (s.inv)).map (t.inv) ‚â´
    eqToHom (by simpa only [Functor.map_comp, Functor.map_id] using
      congr((G.map $(s.hom_inv_id)).obj X.fiber))
  hom_inv_id := by
    apply ext
    erw [comp_fiber]
    simp only [Cat.comp_obj, id_eq, map_hom_inv_id_assoc,
      eqToHom_trans, id_fiber'] at *
    erw [comp_base, id_base]
    dsimp
    rw [s.hom_inv_id]
  inv_hom_id := by
    suffices ‚àÄ {Z g} (_ : g ‚â´ s.hom = Z) (_ : Z = ùüô _)
        {g'} (eq : g' ‚â´ (G.map g).map t.hom = ùüô _)
        (W) (eqW : G.map g ‚â´ G.map s.hom = W)
        (eq2 : ‚àÉ w1 w2, W.map t.hom = eqToHom w1 ‚â´ t.hom ‚â´ eqToHom w2) h1 h2,
        { base := Z, fiber := eqToHom h1 ‚â´ (G.map s.hom).map (g' ‚â´ eqToHom h2) ‚â´ t.hom } =
        ({..} : Grothendieck.Hom ..) from
      this rfl s.inv_hom_id (by simp)
        (W := ùüô _) (eqW := by simp) (eq2 := ‚ü®rfl, rfl, by simp‚ü©) ..
    rintro _ g - rfl g' eq _ rfl ‚ü®w1, w2, eq2 : (G.map s.hom).map _ = _‚ü© h1 h2; congr
    replace eq := congr((G.map s.hom).map $eq)
    simp only [Functor.map_comp, eq2, eqToHom_map, Category.assoc] at eq ‚ä¢
    conv at eq => lhs; slice 1 3
    rw [(comp_eqToHom_iff ..).1 eq]; simp

end Grothendieck

section
variable {C : Type u‚ÇÅ} [Groupoid.{v‚ÇÅ,u‚ÇÅ} C] {F : C ‚•§ Grpd.{v‚ÇÇ,u‚ÇÇ}}

variable (F) in
/--
  In Mathlib.CategoryTheory.Grothendieck we find the Grothendieck construction
  for the functors `F : C ‚•§ Cat`. Given a functor `F : G ‚•§ Grpd`, we show that
  the Grothendieck construction of the composite `F ‚ãô Grpd.forgetToCat`, where
  `forgetToCat : Grpd ‚•§ Cat` is the embedding of groupoids into categories, is a groupoid.
-/
def GroupoidalGrothendieck := Grothendieck (toCat F)

namespace GroupoidalGrothendieck

instance : Category (GroupoidalGrothendieck F) := inferInstanceAs (Category (Grothendieck _))

instance (X : C) : Groupoid (toCat F |>.obj X) where
  inv f := ((F.obj X).str').inv f

def isoMk {X Y : GroupoidalGrothendieck F} (f : X ‚ü∂ Y) : X ‚âÖ Y := by
  fapply Grothendieck.mkIso
  ¬∑ exact (Groupoid.isoEquivHom _ _).2 f.base
  ¬∑ apply (Groupoid.isoEquivHom _ _).2 f.fiber

def inv {X Y : GroupoidalGrothendieck F} (f : X ‚ü∂ Y) : Y ‚ü∂ X  := isoMk f |>.inv

instance groupoid : Groupoid (GroupoidalGrothendieck F) where
  inv f :=  inv f
  inv_comp f := (isoMk f).inv_hom_id
  comp_inv f := (isoMk f).hom_inv_id

def forget : GroupoidalGrothendieck F ‚•§ C :=
  Grothendieck.forget (F ‚ãô Grpd.forgetToCat)
-- note: maybe come up with a better name?

def ToGrpd : GroupoidalGrothendieck F ‚•§ Grpd.{v‚ÇÇ,u‚ÇÇ} := forget ‚ãô F

def functorial {C D : Grpd.{v‚ÇÅ,u‚ÇÅ}} (F : C ‚ü∂ D) (G : D ‚•§ Grpd.{v‚ÇÇ,u‚ÇÇ}) :
    Grothendieck (toCat (F ‚ãô G)) ‚•§ Grothendieck (toCat G) where
  obj X := ‚ü®F.obj X.base, X.fiber‚ü©
  map {X Y} f := ‚ü®F.map f.base, f.fiber‚ü©
  map_id X := by
    fapply Grothendieck.ext
    ¬∑ exact F.map_id X.base
    ¬∑ simp only [Grothendieck.id_fiber', eqToHom_trans]
  map_comp {X Y Z} f g := by
    simp only [Grothendieck.comp]
    fapply Grothendieck.ext
    ¬∑ exact F.map_comp f.base g.base
    ¬∑ erw [Grothendieck.comp_fiber (F:= toCat (F ‚ãô G)) f g]
      simp [eqToHom_trans]
      erw [Grothendieck.comp_fiber]; rfl

end GroupoidalGrothendieck

end
