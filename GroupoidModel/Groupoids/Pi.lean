import GroupoidModel.Groupoids.Sigma
import GroupoidModel.Syntax.NaturalModel

universe v u v‚ÇÅ u‚ÇÅ v‚ÇÇ u‚ÇÇ

noncomputable section
-- NOTE temporary section for stuff to be moved elsewhere
section ForOther
namespace CategoryTheory

-- NOTE is there a better way of doing this?
-- NOTE associativity of functors is definitional, so we can always use `rfl`
lemma func_middle_assoc {A B C D E: Type*} [Category A][Category B][Category C][Category D][Category E]
 (f1: A ‚•§ B) (f2: B ‚•§ C) (f3: C ‚•§ D)(f4: D‚•§ E):
 f1 ‚ãô f2 ‚ãô f3 ‚ãô f4 = f1 ‚ãô (f2 ‚ãô f3) ‚ãô f4 := rfl

lemma func_split_assoc {A B C D E: Type*} [Category A][Category B][Category C][Category D][Category E]
 (f1: A ‚•§ B) (f2: B ‚•§ C) (f3: C ‚•§ D)(f4: D‚•§ E):
 f1 ‚ãô (f2 ‚ãô f3) ‚ãô f4 = (f1 ‚ãô f2) ‚ãô (f3 ‚ãô f4) := rfl

lemma whiskeringLeft_Right_comm {A B C D: Type*} [Category A] [Category B]
    [Category C] [Category D] (F: A‚•§ B)  (H: C ‚•§ D):
    (whiskeringRight _ _ _).obj H ‚ãô (whiskeringLeft  _ _ _ ).obj F =
    (whiskeringLeft _ _ _).obj F ‚ãô (whiskeringRight _ _ _).obj H := by
  aesop_cat

section
variable {A : Type u} [Category.{v} A] {B: Type u‚ÇÅ} [Groupoid.{v‚ÇÅ} B]
    {F G : A ‚•§ B} (h : NatTrans F G)

-- NOTE not sure if this is the best way to organize this
@[simps] def NatTrans.iso : F ‚âÖ G where
  hom := h
  inv := {app a := Groupoid.inv (h.app a)}

def NatTrans.inv : G ‚ü∂ F := h.iso.inv

@[simp] lemma NatTrans.inv_vcomp : h.inv.vcomp h = NatTrans.id G := by
  ext a
  simp [NatTrans.inv]

@[simp] lemma NatTrans.vcomp_inv : h.vcomp h.inv = NatTrans.id F := by
  ext a
  simp [NatTrans.inv]

end
end CategoryTheory

end ForOther

-- NOTE content for this doc starts here
namespace GroupoidModel

open CategoryTheory NaturalModelBase Opposite Grothendieck  Groupoid


/-
   Uncomment this to see the the flow of organizing Conjugation into the Conjugating functor.
   def Conjugating0 {Œì : Grpd.{v,u}} (A B : Œì ‚•§ Grpd.{u‚ÇÅ,u‚ÇÅ})
    {x y: Œì } (f: x ‚ü∂ y) : (A.obj x‚•§ B.obj x) ‚•§ (A.obj y‚•§ B.obj y) :=
     let wr : B.obj x ‚•§ B.obj y := B.map f
     let wl : A.obj y ‚•§ A.obj x := A.map (Groupoid.inv f)
     let f1_ty : (A.obj y ‚•§ A.obj x) ‚•§ ((A.obj x) ‚•§ (B.obj x)) ‚•§ (A.obj y) ‚•§  (B.obj x) :=
       whiskeringLeft (A.obj y) (A.obj x) (B.obj x)
     let f1 : ((A.obj x) ‚•§ (B.obj x)) ‚•§ (A.obj y) ‚•§  (B.obj x) :=
       (whiskeringLeft (A.obj y) (A.obj x) (B.obj x)).obj (A.map (Groupoid.inv f))
     let f2_ty :  ((B.obj x) ‚•§ (B.obj y)) ‚•§ (A.obj y ‚•§ B.obj x) ‚•§ (A.obj y) ‚•§  (B.obj y) :=
       whiskeringRight (A.obj y) (B.obj x) (B.obj y)
     let f2 : (A.obj y ‚•§ B.obj x) ‚•§ (A.obj y) ‚•§  (B.obj y) :=
       (whiskeringRight (A.obj y) (B.obj x) (B.obj y)).obj (B.map f)
     let f3 := f1 ‚ãô f2
     f3
-/

-- NOTE Use {Œì : Type u} [Groupoid.{v} Œì] instead of (Œì : Grpd)
/--
The functor that, on objects `G : A.obj x ‚•§ B.obj x` acts by
creating the map on the right
         A f
  A x --------> A y
   |             .
   |             |
   |             .
G  |             | conjugating A B f G
   |             .
   V             V
  B x --------> B y
         B f
-/
def conjugating {Œì : Type u} [Groupoid.{v} Œì] (A B : Œì ‚•§ Cat)
    {x y : Œì} (f : x ‚ü∂ y) : (A.obj x ‚•§ B.obj x) ‚•§ (A.obj y ‚•§ B.obj y) :=
  (whiskeringLeft (A.obj y) (A.obj x) (B.obj x)).obj (A.map (Groupoid.inv f)) ‚ãô
  (whiskeringRight (A.obj y) (B.obj x) (B.obj y)).obj (B.map f)

def conjugating_id {Œì : Type u} [Groupoid.{v} Œì] (A B : Œì ‚•§ Cat)
    (x : Œì ) : conjugating A B (ùüô x) = Functor.id _ := by
     simp only [conjugating, inv_eq_inv, IsIso.inv_id, CategoryTheory.Functor.map_id]
     have e: (ùüô (B.obj x)) = (ùü≠ (B.obj x)) := rfl
     simp only [e,CategoryTheory.whiskeringRight_obj_id,Functor.comp_id]
     have e': (ùüô (A.obj x)) = (ùü≠ (A.obj x)) := rfl
     simp only[e',CategoryTheory.whiskeringLeft_obj_id]

def conjugating_comp {Œì : Grpd.{v,u}} (A B : Œì ‚•§ Cat)
    (x y z : Œì ) (f:x‚ü∂ y) (g:y‚ü∂ z) :
    conjugating A B (f ‚â´ g) = conjugating A B f ‚ãô conjugating A B g := by
    simp only [conjugating, inv_eq_inv, IsIso.inv_comp, Functor.map_comp, Functor.map_inv]
    have e : (whiskeringRight (A.obj y) (B.obj x) (B.obj y)).obj (B.map f) ‚ãô
    (whiskeringLeft (A.obj z) (A.obj y) (B.obj y)).obj (CategoryTheory.inv (A.map g)) =
    (whiskeringLeft _ _ _).obj (CategoryTheory.inv (A.map g)) ‚ãô
    (whiskeringRight _ _ _).obj (B.map f) := by
      apply whiskeringLeft_Right_comm
    rw [Functor.assoc,func_middle_assoc,e,
      func_split_assoc,whiskeringRight_obj_comp,‚Üê whiskeringLeft_obj_comp]
    rfl

instance functorToGroupoid_Groupoid {A : Type*} [Category A] {B : Type*} [Groupoid B] :
    Groupoid (A ‚•§ B) where
  inv nt := nt.inv
  inv_comp := NatTrans.inv_vcomp
  comp_inv := NatTrans.vcomp_inv

-- NOTE commented out until it is needed
-- def Funcgrpd {A : Type u} [Category.{v,u} A] {B : Type u‚ÇÅ} [Groupoid.{v‚ÇÅ} B]  : Grpd :=
--  Grpd.of (A ‚•§ B)

-- NOTE to follow mathlib convention can use camelCase for definitions, and capitalised first letter when that definition is a Prop or Type
def IsSec {A B : Type*} [Category A] [Category B] (F : B ‚•§ A) (s : A ‚•§ B) :=
 s ‚ãô F = Functor.id A

abbrev Section {A B : Type*} [Category A] [Category B] (F : B ‚•§ A) :=
  ObjectProperty.FullSubcategory (IsSec F)

instance Section.category {A B : Type*} [Category A] [Category B] (F : B ‚•§ A) :
  Category (Section F) := ObjectProperty.FullSubcategory.category (IsSec F)

abbrev Section.inc {A B:Type*} [Category A] [Category B] (F:B ‚•§ A) :
  Section F ‚•§ (A ‚•§ B) := ObjectProperty.Œπ (IsSec F)

@[simp] lemma Section.inc_obj {A B:Type*} [Category A] [Category B] (F:B ‚•§ A) (s: Section F):
  (Section.inc F).obj s = s.obj := rfl

@[simp] lemma Section.inc_map {A B:Type*} [Category A] [Category B] (F:B ‚•§ A)
  (s1 s2: Section F) (Œ∑ : s1 ‚ü∂ s2):
  (Section.inc F).map Œ∑ = Œ∑ := rfl

-- TODO refactor using `CategoryTheory.Functor.FullyFaithful.map_injective`
lemma Section.inc_eq {A B:Type*} [Category A] [Category B] (F:B ‚•§ A)
  (s1 s2: Section F) (Œ∑‚ÇÅ Œ∑‚ÇÇ : s1 ‚ü∂ s2):
  (Section.inc F).map Œ∑‚ÇÅ = (Section.inc F).map Œ∑‚ÇÇ ‚Üí Œ∑‚ÇÅ = Œ∑‚ÇÇ := by
   aesop_cat

instance Section.groupoid {A:Type u} [Category.{v} A] {B : Type u‚ÇÅ}
    [Groupoid.{v‚ÇÅ} B] (F : B ‚•§ A) : Groupoid (Section F) :=
  InducedCategory.groupoid (A ‚•§ B) (fun (f: Section F) ‚Ü¶ f.obj)

--Q:Should this be def or abbrev? JH: abbrev I think?
abbrev Section.grpd {A:Type u} [Category.{v ,u} A] {B : Type u‚ÇÅ}
    [Groupoid.{v‚ÇÅ} B] (F : B ‚•§ A) : Grpd :=
  Grpd.of (Section F)

open FunctorOperation.sigma

-- TODO camelCase
def Fiber_Grpd {Œì : Grpd.{v‚ÇÇ,u‚ÇÇ}} (A : Œì ‚•§ Grpd.{v‚ÇÅ,u‚ÇÅ})
    (B : Groupoidal A ‚•§ Grpd.{v‚ÇÅ,u‚ÇÅ}) (x : Œì) : Grpd :=
  Section.grpd ((fstAux B).app x)

-- TODO lower case (and so on)
lemma Fiber_Grpd.Œ± {Œì : Grpd.{v‚ÇÇ,u‚ÇÇ}} (A : Œì ‚•§ Grpd.{v‚ÇÅ,u‚ÇÅ})
    (B : Groupoidal A ‚•§ Grpd.{v‚ÇÅ,u‚ÇÅ}) (x : Œì) :
    (Fiber_Grpd A B x).Œ± = Section ((fstAux B).app x) := rfl

def conjugate {D: Type*} (C: Grpd.{v‚ÇÅ,u‚ÇÅ}) [Category D] (A B : C ‚•§ D)
    {x y: C} (f: x ‚ü∂ y) (s: A.obj x ‚ü∂  B.obj x) :
     A.obj y ‚ü∂  B.obj y := A.map (Groupoid.inv f) ‚â´ s ‚â´ B.map f


lemma conjugate_id {D: Type*} (C: Grpd.{v‚ÇÅ,u‚ÇÅ}) [Category D] (A B : C ‚•§ D)
    (x : C) (s: A.obj x ‚ü∂  B.obj x)  : conjugate C A B (ùüô x) s = s:= by
     simp only [conjugate, inv_eq_inv, IsIso.inv_id, CategoryTheory.Functor.map_id,
       Category.comp_id, Category.id_comp]

lemma conjugate_comp {D: Type*} (C: Grpd.{v‚ÇÅ,u‚ÇÅ}) [Category D] (A B : C ‚•§ D)
    {x y z: C} (f: x ‚ü∂ y) (g: y ‚ü∂ z) (s: A.obj x ‚ü∂  B.obj x):
     conjugate C A B (f ‚â´ g) s = conjugate C A B g (conjugate C A B f s) := by
      simp only [conjugate, inv_eq_inv, IsIso.inv_comp, Functor.map_comp, Functor.map_inv,
        Category.assoc]

/-only need naturality of Œ∑-/
/-therefore, the fact that the conjugation sends section to section is by naturality of
 the projection map from sigma, and the fact that some functor has sections as its codomain-/
lemma conjugate_PreserveSection {D: Type*} (C: Grpd.{v‚ÇÅ,u‚ÇÅ}) [Category D] (A B : C ‚•§ D)
    (Œ∑: NatTrans B A)
    {x y: C} (f: x ‚ü∂ y) (s: A.obj x ‚ü∂  B.obj x):
    s ‚â´ Œ∑.app x = ùüô (A.obj x) ‚Üí (conjugate C A B f s) ‚â´ Œ∑.app y = ùüô (A.obj y) :=
     by
     intro ieq
     simp only [conjugate, inv_eq_inv, Functor.map_inv, ‚Üê Category.assoc, NatTrans.naturality,
      IsIso.inv_comp_eq, Category.comp_id]
     simp only [Category.assoc, NatTrans.naturality, IsIso.inv_comp_eq, Category.comp_id]
     simp only [‚Üê Category.assoc,ieq,Category.id_comp]

def conjugate_Fiber {Œì : Grpd.{v,u}} (A : Œì ‚•§ Grpd.{u‚ÇÅ,u‚ÇÅ})
    (B : Groupoidal A ‚•§ Grpd.{u‚ÇÅ,u‚ÇÅ})
    {x y: Œì} (f: x ‚ü∂ y)
    (s: A.obj x ‚•§ (GroupoidModel.FunctorOperation.sigma A B).obj x) :
    (A.obj y ‚•§ (GroupoidModel.FunctorOperation.sigma A B).obj y) :=
    conjugate Œì A (GroupoidModel.FunctorOperation.sigma A B) f s

def conjugate_FiberFunc {Œì : Grpd.{v,u}} (A : Œì ‚•§ Grpd.{u‚ÇÅ,u‚ÇÅ})
    (B : Groupoidal A ‚•§ Grpd.{u‚ÇÅ,u‚ÇÅ})
    {x y: Œì} (f: x ‚ü∂ y):
    (A.obj x ‚•§ (GroupoidModel.FunctorOperation.sigma A B).obj x) ‚•§
    (A.obj y ‚•§ (GroupoidModel.FunctorOperation.sigma A B).obj y) :=
     conjugating (A ‚ãô Grpd.forgetToCat)
      (GroupoidModel.FunctorOperation.sigma A B ‚ãô Grpd.forgetToCat) f

lemma conjugate_FiberFunc.obj {Œì : Grpd.{v,u}} (A : Œì ‚•§ Grpd.{u‚ÇÅ,u‚ÇÅ})
    (B : Groupoidal A ‚•§ Grpd.{u‚ÇÅ,u‚ÇÅ})
    {x y: Œì} (f: x ‚ü∂ y):
     (conjugate_FiberFunc A B f).obj = conjugate _ A (FunctorOperation.sigma A B) f
     := rfl

lemma conjugate_FiberFunc.map {Œì : Grpd.{v,u}} (A : Œì ‚•§ Grpd.{u‚ÇÅ,u‚ÇÅ})
    (B : Groupoidal A ‚•§ Grpd.{u‚ÇÅ,u‚ÇÅ})
    {x y: Œì} (f: x ‚ü∂ y)
    (s1 s2: A.obj x ‚•§ (GroupoidModel.FunctorOperation.sigma A B).obj x)
    (Œ∑: s1 ‚ü∂ s2):
     (conjugate_FiberFunc A B f).map Œ∑ =
     CategoryTheory.whiskerLeft (A.map (Groupoid.inv f))
     (CategoryTheory.whiskerRight Œ∑
         ((GroupoidModel.FunctorOperation.sigma A B).map f))
     := rfl

def conjugateLiftCond {Œì : Grpd.{v,u}} (A : Œì ‚•§ Grpd.{u‚ÇÅ,u‚ÇÅ})
    (B : Groupoidal A ‚•§ Grpd.{u‚ÇÅ,u‚ÇÅ})
    {x y: Œì} (f: x ‚ü∂ y):
    ‚àÄ (X : Section ((fstAux B).app x)),
    IsSec ((fstAux B).app y)
    ((Section.inc ((fstAux B).app x) ‚ãô conjugate_FiberFunc A B f).obj X)
    := by
      intro s
      simp only [IsSec, FunctorOperation.sigma_obj, Functor.comp_obj,
        conjugate_FiberFunc.obj]
      have a:= s.property
      simp only [IsSec, FunctorOperation.sigma_obj, Grpd.coe_of] at a
      have a':= conjugate_PreserveSection Œì A (FunctorOperation.sigma A B)
                (fstAux B) f _ a
      assumption


def conjugateLiftFunc {Œì : Grpd.{v,u}} (A : Œì ‚•§ Grpd.{u‚ÇÅ,u‚ÇÅ})
    (B : Groupoidal A ‚•§ Grpd.{u‚ÇÅ,u‚ÇÅ})
    {x y: Œì} (f: x ‚ü∂ y):
     Section ((fstAux B).app x) ‚•§ Section ((fstAux B).app y) :=
     CategoryTheory.ObjectProperty.lift (IsSec ((fstAux B).app y))
            ((Section.inc ((fstAux B).app x) ‚ãô conjugate_FiberFunc A B f))
     (conjugateLiftCond A B f)


lemma conjugateLiftFunc.obj {Œì : Grpd.{v,u}} (A : Œì ‚•§ Grpd.{u‚ÇÅ,u‚ÇÅ})
    (B : Groupoidal A ‚•§ Grpd.{u‚ÇÅ,u‚ÇÅ})
    {x y: Œì} (f: x ‚ü∂ y) (s: Section ((fstAux B).app x)):
    ((conjugateLiftFunc A B f).obj s).obj =
    (conjugate_FiberFunc A B f).obj s.obj := rfl



lemma conjugateLiftFunc.map {Œì : Grpd.{v,u}} (A : Œì ‚•§ Grpd.{u‚ÇÅ,u‚ÇÅ})
    (B : Groupoidal A ‚•§ Grpd.{u‚ÇÅ,u‚ÇÅ})
    {x y: Œì} (f: x ‚ü∂ y) (s1 s2: Section ((fstAux B).app x))
    (Œ∑: s1 ‚ü∂ s2):
    (Section.inc ((fstAux B).app y)).map
     ((conjugateLiftFunc A B f).map Œ∑) =
    (conjugate_FiberFunc A B f).map Œ∑ := rfl


lemma conjugateLiftFunc_Inc {Œì : Grpd.{v,u}} (A : Œì ‚•§ Grpd.{u‚ÇÅ,u‚ÇÅ})
    (B : Groupoidal A ‚•§ Grpd.{u‚ÇÅ,u‚ÇÅ})
    {x y: Œì} (f: x ‚ü∂ y):
    (conjugateLiftFunc A B f) ‚ãô Section.inc ((fstAux B).app y)
    = ((Section.inc ((fstAux B).app x) ‚ãô conjugate_FiberFunc A B f))
    := by
      simp [FunctorOperation.sigma_obj, - fstAux_app, conjugateLiftFunc, ObjectProperty.liftCompŒπIso]
      /- TODO: `sorry` introduced during bump to `4.21.0-rc3`.
      We are planning to refactor this file; the proof will be fixed then. -/
      sorry


lemma idSection_Inc {Œì : Grpd.{v,u}} (A : Œì ‚•§ Grpd.{u‚ÇÅ,u‚ÇÅ})
    (B : Groupoidal A ‚•§ Grpd.{u‚ÇÅ,u‚ÇÅ})
    (x : Œì) :
    ùüô (Fiber_Grpd A B x) ‚ãô Section.inc ((fstAux B).app x)
    = ((Section.inc ((fstAux B).app x) ‚ãô conjugate_FiberFunc A B (ùüô x))) :=
     by
     simp only [FunctorOperation.sigma_obj, Grpd.coe_of]
     rw[conjugate_FiberFunc,conjugating_id]
     rfl


lemma fullSubcategoryInclusion_Mono_lemma {T C:Type u}
   [Category.{v} C] [Category.{v} T]  (Z: C ‚Üí Prop)
 (f g: T ‚•§ ObjectProperty.FullSubcategory Z)
 (e: f ‚ãô (ObjectProperty.Œπ Z) = g ‚ãô (ObjectProperty.Œπ Z)) : f = g := by
  let iso:= eqToIso e
  let fgiso := CategoryTheory.Functor.fullyFaithfulCancelRight (ObjectProperty.Œπ Z) iso
  have p : ‚àÄ (X : T), f.obj X = g.obj X := by
    intro X
    have e1: (f ‚ãô ObjectProperty.Œπ Z).obj X = (g ‚ãô ObjectProperty.Œπ Z).obj X
     := Functor.congr_obj e X
    simp only [Functor.comp_obj, ObjectProperty.Œπ_obj] at e1
    ext
    exact e1
  /- TODO: `sorry` introduced during bump to `4.21.0-rc3`.
  We are planning to refactor this file; the proof will be fixed then. -/
  sorry
  -- fapply CategoryTheory.Functor.ext_of_iso fgiso
  -- ¬∑ exact p
  -- intro X
  -- simp only [Functor.fullyFaithfulCancelRight, NatIso.ofComponents_hom_app, Functor.preimageIso_hom,
  --   fullSubcategoryInclusion.obj, Iso.app_hom, fgiso]
  -- have e2: (fullSubcategoryInclusion Z).map (eqToHom (p X)) = (iso.hom.app X) := by
  --   simp only [fullSubcategoryInclusion, inducedFunctor_obj, inducedFunctor_map, eqToIso.hom,
  --     eqToHom_app, Functor.comp_obj, iso, fgiso]
  --   rfl
  -- simp only[‚Üê e2,Functor.preimage, fullSubcategoryInclusion.obj, fullSubcategoryInclusion.map,
  --   Classical.choose_eq, fgiso, iso]

lemma conjugateLiftFunc_id
    {Œì : Grpd.{v,u}} (A : Œì ‚•§ Grpd.{u‚ÇÅ,u‚ÇÅ})
    (B : Groupoidal A ‚•§ Grpd.{u‚ÇÅ,u‚ÇÅ})
    (x: Œì) : conjugateLiftFunc A B (ùüô x) = ùüô (Fiber_Grpd A B x) :=
     by
      fapply fullSubcategoryInclusion_Mono_lemma
      simp only [FunctorOperation.sigma_obj, Grpd.coe_of, conjugateLiftFunc_Inc A B (ùüô x),
        idSection_Inc A B x]

lemma conjugateLiftFunc_comp
    {Œì : Grpd.{v,u}} (A : Œì ‚•§ Grpd.{u‚ÇÅ,u‚ÇÅ})
    (B : Groupoidal A ‚•§ Grpd.{u‚ÇÅ,u‚ÇÅ})
    {x y z: Œì} (f : x ‚ü∂ y) (g : y ‚ü∂ z):
    conjugateLiftFunc A B (f ‚â´ g) =  (conjugateLiftFunc A B f) ‚ãô (conjugateLiftFunc A B g) := by
    fapply fullSubcategoryInclusion_Mono_lemma
    simp only [FunctorOperation.sigma_obj, Grpd.coe_of, Functor.assoc]
    have e: conjugateLiftFunc A B (f ‚â´ g) ‚ãô Section.inc ((fstAux B).app z) =
  conjugateLiftFunc A B f ‚ãô conjugateLiftFunc A B g ‚ãô  Section.inc ((fstAux B).app z) :=
    by
     simp only [FunctorOperation.sigma_obj, Grpd.coe_of, conjugateLiftFunc_Inc A B g,
                ‚Üê Functor.assoc,conjugateLiftFunc_Inc A B f, FunctorOperation.sigma_obj,
                Grpd.coe_of, conjugate_FiberFunc]
     simp only [Functor.assoc, ‚Üê conjugating_comp (A ‚ãô Grpd.forgetToCat),
                conjugateLiftFunc_Inc A B (f ‚â´ g),conjugate_FiberFunc]
    refine e

/-- The formation rule for Œ£-types for the ambient natural model `base`
  unfolded into operations between functors -/

def pi {Œì : Grpd.{v,u}} {A : Œì ‚•§ Grpd.{u‚ÇÅ,u‚ÇÅ}}
    (B : Groupoidal A ‚•§ Grpd.{u‚ÇÅ,u‚ÇÅ})
    : Œì ‚•§ Grpd.{u‚ÇÅ,u‚ÇÅ} where
      obj x := Fiber_Grpd A B x
      map f := conjugateLiftFunc A B f
      map_id x:= conjugateLiftFunc_id A B x
      map_comp := conjugateLiftFunc_comp A B

def smallUPi_app {Œì : Ctx.{max u (v+1)}}
    (AB : y(Œì) ‚ü∂ smallU.{v, max u (v+1)}.Ptp.obj smallU.{v, max u (v+1)}.Ty) :
    y(Œì) ‚ü∂ smallU.{v, max u (v+1)}.Ty :=
  yonedaCategoryEquiv.symm (pi (smallU.PtpEquiv.snd AB))

/-- The formation rule for Œ†-types for the natural model `smallU` -/
def smallUPi.Pi : smallU.{v}.Ptp.obj smallU.{v}.Ty ‚ü∂ smallU.{v}.Ty :=
  NatTrans.yonedaMk smallUPi_app sorry

/-- The introduction rule for Œ†-types for the natural model `smallU` -/
def smallUPi.lam : smallU.{v}.Ptp.obj smallU.{v}.Tm ‚ü∂ smallU.{v}.Tm :=
  NatTrans.yonedaMk sorry sorry

def smallUPi : NaturalModelPi smallU.{v} where
  Pi := smallUPi.Pi.{v}
  lam := smallUPi.lam.{v}
  Pi_pullback := sorry

def uHomSeqPis' (i : ‚Ñï) (ilen : i < 4) :
  NaturalModelPi (uHomSeqObjs i ilen) :=
  match i with
  | 0 => smallUPi.{0,4}
  | 1 => smallUPi.{1,4}
  | 2 => smallUPi.{2,4}
  | 3 => smallUPi.{3,4}
  | (n+4) => by omega

def uHomSeqPis : UHomSeqPiSigma Ctx := { uHomSeq with
  nmPi := uHomSeqPis'
  nmSigma := uHomSeqSigmas' }

end GroupoidModel

end
